{
	"info": {
		"_postman_id": "f1b0e9a5-9223-4ad2-972c-9446fcab3430",
		"name": "Awards service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15905052"
	},
	"item": [
		{
			"name": "Pre-requisites",
			"item": [
				{
					"name": "Admin user",
					"item": [
						{
							"name": "Admin log-in",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"ADMIN_JWT\", jsonRes.Data.AccessToken);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Moderator login: Access token is returned\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('AccessToken');\r",
											"    pm.expect(jsonRes.Data.AccessToken).to.not.be.null;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"UserName\": \"admin\",\r\n    \"Password\": \"{{ADMIN_PASSWORD}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/users/login-password",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"users",
										"login-password"
									]
								},
								"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
							},
							"response": []
						}
					]
				},
				{
					"name": "Admin create a moderator",
					"item": [
						{
							"name": "Get user roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    var roleTypes = jsonRes.Data;\r",
											"    for(var i = 0; i < roleTypes.length; i++) {\r",
											"        var r = roleTypes[i];\r",
											"        var name = r.Name;\r",
											"        var id = r.id;\r",
											"        var str = name.toUpperCase() + \"_ROLE_ID\";\r",
											"        pm.environment.set(str, id);\r",
											"    }\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/users/role-types",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"users",
										"role-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get clients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    var clients = jsonRes.Data.Items;\r",
											"    for(var i = 0; i < clients.length; i++) {\r",
											"        var r = clients[i];\r",
											"        var name = r.Name;\r",
											"        var id = r.id;\r",
											"        var str = \"CLIENT_ID\";\r",
											"        pm.environment.set(str, id);\r",
											"    }\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{ADMIN_JWT}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/clients/search",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clients",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create moderator",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    var user = jsonRes.Data;\r",
											"    pm.environment.set(\"MODERATOR_USER_ID\", user.id);\r",
											"    pm.environment.set(\"MODERATOR_USER_NAME\", user.UserName);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
											"pm.environment.set(\"PHONE\", phonenumber);\r",
											"pm.environment.set(\"PASSWORD\", \"Test@123\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{ADMIN_JWT}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"RoleId\": \"{{CONTENTMODERATOR_ROLE_ID}}\",\r\n    \"ClientId\" : \"{{CLIENT_ID}}\",\r\n    \"Prefix\": \"Mr.\",\r\n    \"FirstName\": \"Sachin\",\r\n    \"LastName\": \"Tendulkar\",\r\n    \"Email\": \"sachin.tendulkar@gmail.com\",\r\n    \"CountryCode\": \"+91\",\r\n    \"Phone\": \"{{PHONE}}\",\r\n    \"Password\": \"{{PASSWORD}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/users",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Moderator logs in",
					"item": [
						{
							"name": "moderator logs in",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"MODERATOR_USER_JWT\", jsonRes.Data.AccessToken);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Moderator login: Access token is returned\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('AccessToken');\r",
											"    pm.expect(jsonRes.Data.AccessToken).to.not.be.null;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"    //pm.environment.set(\"ADMIN_PASSWORD\", jsonRes.Data.Client.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"UserName\": \"{{MODERATOR_USER_NAME}}\",\r\n    \"Password\": \"{{PASSWORD}}\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/users/login-password",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"users",
										"login-password"
									]
								},
								"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
							},
							"response": []
						}
					]
				},
				{
					"name": "Moderator creates incoming event types",
					"item": [
						{
							"name": "Create medication event type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"MEDICATION_EVENT_TYPE_ID\", jsonRes.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Event type is created\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data.Name).to.not.be.null;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{MODERATOR_USER_JWT}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Medication\",\r\n    \"Description\": \"This event is triggered when a patient marks medication consumption as taken or missed\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/engine/event-types",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"engine",
										"event-types"
									]
								},
								"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
							},
							"response": []
						},
						{
							"name": "Create exercise event type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"EXERCISE_EVENT_TYPE_ID\", jsonRes.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Event type is created\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data.Name).to.not.be.null;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{MODERATOR_USER_JWT}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Exercise\",\r\n    \"Description\": \"This event is triggered when a patient performs some exercise\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/engine/event-types",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"engine",
										"event-types"
									]
								},
								"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
							},
							"response": []
						},
						{
							"name": "Create nutrition event type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"NUTRITION_EVENT_TYPE_ID\", jsonRes.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Event type is created\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data.Name).to.not.be.null;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{MODERATOR_USER_JWT}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Nutrition\",\r\n    \"Description\": \"This event is triggered when a patient marks consumption of healthy nutrition.\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/engine/event-types",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"engine",
										"event-types"
									]
								},
								"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
							},
							"response": []
						},
						{
							"name": "Create health journey task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"HEALTH_JOURNEY_EVENT_TYPE_ID\", jsonRes.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Event type is created\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data.Name).to.not.be.null;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{MODERATOR_USER_JWT}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Health Journey\",\r\n    \"Description\": \"This event is triggered when a patient marks health journey task as done\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/engine/event-types",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"engine",
										"event-types"
									]
								},
								"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
							},
							"response": []
						},
						{
							"name": "Create vitals event type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"VITAL_EVENT_TYPE_ID\", jsonRes.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Event type is created\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data.Name).to.not.be.null;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{MODERATOR_USER_JWT}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Vital\",\r\n    \"Description\": \"This event is triggered when a patient record vitals regularily\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/engine/event-types",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"engine",
										"event-types"
									]
								},
								"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
							},
							"response": []
						},
						{
							"name": "Create mental health event type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"MENTAL_HEALTH_EVENT_TYPE_ID\", jsonRes.Data.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Event type is created\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
											"    pm.expect(jsonRes.Data.Name).to.not.be.null;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{MODERATOR_USER_JWT}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"MentalHealth\",\r\n    \"Description\": \"This event is triggered when a patient marks medication consumption as taken or missed\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{BASE_URL}}/engine/event-types",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"engine",
										"event-types"
									]
								},
								"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
							},
							"response": []
						},
						{
							"name": "Search all event types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"All event types are returned\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Items');\r",
											"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{MODERATOR_USER_JWT}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/engine/event-types/search",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"engine",
										"event-types",
										"search"
									]
								},
								"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
							},
							"response": []
						}
					]
				},
				{
					"name": "Types",
					"item": [
						{
							"name": "Get user roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"User roles are returned\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Types');\r",
											"    pm.expect(jsonRes.Data.Types.length).greaterThan(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{MODERATOR_USER_JWT}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/types/role-types",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"types",
										"role-types"
									]
								},
								"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
							},
							"response": []
						},
						{
							"name": "Get event action types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"isUpperCase = (str) => {\r",
											"    return str.toUpperCase() === str;\r",
											"};\r",
											"\r",
											"convertPascalCaseToCapitalSnakeCase = (str) => {\r",
											"    if (str.length > 0) {\r",
											"        var outstr = \"\";\r",
											"        str = str.replace('-', '');\r",
											"        for (var i = 0; i < str.length; i++) {\r",
											"            var c = str.charAt(i);\r",
											"            if (isUpperCase(c) && i !== 0) {\r",
											"                outstr += '_' + c.toUpperCase();\r",
											"            }\r",
											"            else {\r",
											"                outstr += c.toUpperCase();\r",
											"            }\r",
											"        }\r",
											"        return outstr;\r",
											"    }\r",
											"    return str;\r",
											"};\r",
											"\r",
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    var types = jsonRes.Data.Types;\r",
											"    for(var i = 0; i < types.length; i++) {\r",
											"        var r = types[i];\r",
											"        const x = convertPascalCaseToCapitalSnakeCase(r);\r",
											"        var str = x + \"_EVENT_TYPE\";\r",
											"        console.log(str);\r",
											"        pm.environment.set(str, types[i]);\r",
											"    }\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Event action types are returned\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Types');\r",
											"    pm.expect(jsonRes.Data.Types.length).greaterThan(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{MODERATOR_USER_JWT}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/types/event-action-types",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"types",
										"event-action-types"
									]
								},
								"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
							},
							"response": []
						},
						{
							"name": "Get context types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"isUpperCase = (str) => {\r",
											"    return str.toUpperCase() === str;\r",
											"};\r",
											"\r",
											"convertPascalCaseToCapitalSnakeCase = (str) => {\r",
											"    if (str.length > 0) {\r",
											"        var outstr = \"\";\r",
											"        str = str.replace('-', '');\r",
											"        for (var i = 0; i < str.length; i++) {\r",
											"            var c = str.charAt(i);\r",
											"            if (isUpperCase(c) && i !== 0) {\r",
											"                outstr += '_' + c.toUpperCase();\r",
											"            }\r",
											"            else {\r",
											"                outstr += c.toUpperCase();\r",
											"            }\r",
											"        }\r",
											"        return outstr;\r",
											"    }\r",
											"    return str;\r",
											"};\r",
											"\r",
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    var types = jsonRes.Data.Types;\r",
											"    for(var i = 0; i < types.length; i++) {\r",
											"        var r = types[i];\r",
											"        const x = convertPascalCaseToCapitalSnakeCase(r);\r",
											"        var str = x + \"_CONTEXT_TYPE\";\r",
											"        console.log(str);\r",
											"        pm.environment.set(str, types[i]);\r",
											"    }\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Context types are returned\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Types');\r",
											"    pm.expect(jsonRes.Data.Types.length).greaterThan(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{MODERATOR_USER_JWT}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/types/context-types",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"types",
										"context-types"
									]
								},
								"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
							},
							"response": []
						},
						{
							"name": "Get condition operator types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"isUpperCase = (str) => {\r",
											"    return str.toUpperCase() === str;\r",
											"};\r",
											"\r",
											"convertPascalCaseToCapitalSnakeCase = (str) => {\r",
											"    if (str.length > 0) {\r",
											"        var outstr = \"\";\r",
											"        str = str.replace('-', '');\r",
											"        for (var i = 0; i < str.length; i++) {\r",
											"            var c = str.charAt(i);\r",
											"            if (isUpperCase(c) && i !== 0) {\r",
											"                outstr += '_' + c.toUpperCase();\r",
											"            }\r",
											"            else {\r",
											"                outstr += c.toUpperCase();\r",
											"            }\r",
											"        }\r",
											"        return outstr;\r",
											"    }\r",
											"    return str;\r",
											"};\r",
											"\r",
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    var types = jsonRes.Data.Types;\r",
											"    for(var i = 0; i < types.length; i++) {\r",
											"        var r = types[i];\r",
											"        const x = convertPascalCaseToCapitalSnakeCase(r);\r",
											"        var str = x + \"_CONDITION_OPERATOR_TYPE\";\r",
											"        console.log(str);\r",
											"        pm.environment.set(str, types[i]);\r",
											"    }\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Condition operator types are returned\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Types');\r",
											"    pm.expect(jsonRes.Data.Types.length).greaterThan(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{MODERATOR_USER_JWT}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/types/condition-operator-types",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"types",
										"condition-operator-types"
									]
								},
								"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
							},
							"response": []
						},
						{
							"name": "Get logical operator types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"isUpperCase = (str) => {\r",
											"    return str.toUpperCase() === str;\r",
											"};\r",
											"\r",
											"convertPascalCaseToCapitalSnakeCase = (str) => {\r",
											"    if (str.length > 0) {\r",
											"        var outstr = \"\";\r",
											"        str = str.replace('-', '');\r",
											"        for (var i = 0; i < str.length; i++) {\r",
											"            var c = str.charAt(i);\r",
											"            if (isUpperCase(c) && i !== 0) {\r",
											"                outstr += '_' + c.toUpperCase();\r",
											"            }\r",
											"            else {\r",
											"                outstr += c.toUpperCase();\r",
											"            }\r",
											"        }\r",
											"        return outstr;\r",
											"    }\r",
											"    return str;\r",
											"};\r",
											"\r",
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    var types = jsonRes.Data.Types;\r",
											"    for(var i = 0; i < types.length; i++) {\r",
											"        var r = types[i];\r",
											"        const x = convertPascalCaseToCapitalSnakeCase(r);\r",
											"        var str = x + \"_LOGICAL_OPERATOR_TYPE\";\r",
											"        console.log(str);\r",
											"        pm.environment.set(str, types[i]);\r",
											"    }\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Logical operator types are returned\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Types');\r",
											"    pm.expect(jsonRes.Data.Types.length).greaterThan(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{MODERATOR_USER_JWT}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/types/logical-operator-types",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"types",
										"logical-operator-types"
									]
								},
								"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
							},
							"response": []
						},
						{
							"name": "Get composite operator types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"isUpperCase = (str) => {\r",
											"    return str.toUpperCase() === str;\r",
											"};\r",
											"\r",
											"convertPascalCaseToCapitalSnakeCase = (str) => {\r",
											"    if (str.length > 0) {\r",
											"        var outstr = \"\";\r",
											"        str = str.replace('-', '');\r",
											"        for (var i = 0; i < str.length; i++) {\r",
											"            var c = str.charAt(i);\r",
											"            if (isUpperCase(c) && i !== 0) {\r",
											"                outstr += '_' + c.toUpperCase();\r",
											"            }\r",
											"            else {\r",
											"                outstr += c.toUpperCase();\r",
											"            }\r",
											"        }\r",
											"        return outstr;\r",
											"    }\r",
											"    return str;\r",
											"};\r",
											"\r",
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    var types = jsonRes.Data.Types;\r",
											"    for(var i = 0; i < types.length; i++) {\r",
											"        var r = types[i];\r",
											"        const x = convertPascalCaseToCapitalSnakeCase(r);\r",
											"        var str = x + \"_COMPOSITE_OPERATOR_TYPE\";\r",
											"        console.log(str);\r",
											"        pm.environment.set(str, types[i]);\r",
											"    }\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Composite operator types are returned\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Types');\r",
											"    pm.expect(jsonRes.Data.Types.length).greaterThan(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{MODERATOR_USER_JWT}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/types/composite-operator-types",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"types",
										"composite-operator-types"
									]
								},
								"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
							},
							"response": []
						},
						{
							"name": "Get mathematical types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"isUpperCase = (str) => {\r",
											"    return str.toUpperCase() === str;\r",
											"};\r",
											"\r",
											"convertPascalCaseToCapitalSnakeCase = (str) => {\r",
											"    if (str.length > 0) {\r",
											"        var outstr = \"\";\r",
											"        str = str.replace('-', '');\r",
											"        for (var i = 0; i < str.length; i++) {\r",
											"            var c = str.charAt(i);\r",
											"            if (isUpperCase(c) && i !== 0) {\r",
											"                outstr += '_' + c.toUpperCase();\r",
											"            }\r",
											"            else {\r",
											"                outstr += c.toUpperCase();\r",
											"            }\r",
											"        }\r",
											"        return outstr;\r",
											"    }\r",
											"    return str;\r",
											"};\r",
											"\r",
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    var types = jsonRes.Data.Types;\r",
											"    for(var i = 0; i < types.length; i++) {\r",
											"        var r = types[i];\r",
											"        const x = convertPascalCaseToCapitalSnakeCase(r);\r",
											"        var str = x + \"_MATHEMATICAL_OPERATOR_TYPE\";\r",
											"        console.log(str);\r",
											"        pm.environment.set(str, types[i]);\r",
											"    }\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Mathematical operator types are returned\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Types');\r",
											"    pm.expect(jsonRes.Data.Types.length).greaterThan(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{MODERATOR_USER_JWT}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/types/mathematical-operator-types",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"types",
										"mathematical-operator-types"
									]
								},
								"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
							},
							"response": []
						},
						{
							"name": "Get operand data types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"isUpperCase = (str) => {\r",
											"    return str.toUpperCase() === str;\r",
											"};\r",
											"\r",
											"convertPascalCaseToCapitalSnakeCase = (str) => {\r",
											"    if (str.length > 0) {\r",
											"        var outstr = \"\";\r",
											"        str = str.replace('-', '');\r",
											"        for (var i = 0; i < str.length; i++) {\r",
											"            var c = str.charAt(i);\r",
											"            if (isUpperCase(c) && i !== 0) {\r",
											"                outstr += '_' + c.toUpperCase();\r",
											"            }\r",
											"            else {\r",
											"                outstr += c.toUpperCase();\r",
											"            }\r",
											"        }\r",
											"        return outstr;\r",
											"    }\r",
											"    return str;\r",
											"};\r",
											"\r",
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    var types = jsonRes.Data.Types;\r",
											"    for(var i = 0; i < types.length; i++) {\r",
											"        var r = types[i];\r",
											"        const x = convertPascalCaseToCapitalSnakeCase(r);\r",
											"        var str = x + \"_OPERAND_DATA_TYPE\";\r",
											"        console.log(str);\r",
											"        pm.environment.set(str, types[i]);\r",
											"    }\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Operand data types are returned\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Types');\r",
											"    pm.expect(jsonRes.Data.Types.length).greaterThan(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{MODERATOR_USER_JWT}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/types/operand-data-types",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"types",
										"operand-data-types"
									]
								},
								"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
							},
							"response": []
						},
						{
							"name": "Get execution statuses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"isUpperCase = (str) => {\r",
											"    return str.toUpperCase() === str;\r",
											"};\r",
											"\r",
											"convertPascalCaseToCapitalSnakeCase = (str) => {\r",
											"    if (str.length > 0) {\r",
											"        var outstr = \"\";\r",
											"        str = str.replace('-', '');\r",
											"        for (var i = 0; i < str.length; i++) {\r",
											"            var c = str.charAt(i);\r",
											"            if (isUpperCase(c) && i !== 0) {\r",
											"                outstr += '_' + c.toUpperCase();\r",
											"            }\r",
											"            else {\r",
											"                outstr += c.toUpperCase();\r",
											"            }\r",
											"        }\r",
											"        return outstr;\r",
											"    }\r",
											"    return str;\r",
											"};\r",
											"\r",
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    var types = jsonRes.Data.Types;\r",
											"    for(var i = 0; i < types.length; i++) {\r",
											"        var r = types[i];\r",
											"        const x = convertPascalCaseToCapitalSnakeCase(r);\r",
											"        var str = x + \"_EXECUTION_STATUS_TYPE\";\r",
											"        console.log(str);\r",
											"        pm.environment.set(str, types[i]);\r",
											"    }\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Execution status types are returned\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Types');\r",
											"    pm.expect(jsonRes.Data.Types.length).greaterThan(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{MODERATOR_USER_JWT}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/types/execution-status-types",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"types",
										"execution-status-types"
									]
								},
								"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
							},
							"response": []
						},
						{
							"name": "Get data action types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"isUpperCase = (str) => {\r",
											"    return str.toUpperCase() === str;\r",
											"};\r",
											"\r",
											"convertPascalCaseToCapitalSnakeCase = (str) => {\r",
											"    if (str.length > 0) {\r",
											"        var outstr = \"\";\r",
											"        str = str.replace('-', '');\r",
											"        str = str.replace('-', '');\r",
											"        str = str.replace('-', '');\r",
											"        for (var i = 0; i < str.length; i++) {\r",
											"            var c = str.charAt(i);\r",
											"            if (isUpperCase(c) && i !== 0) {\r",
											"                outstr += '_' + c.toUpperCase();\r",
											"            }\r",
											"            else {\r",
											"                outstr += c.toUpperCase();\r",
											"            }\r",
											"        }\r",
											"        return outstr;\r",
											"    }\r",
											"    return str;\r",
											"};\r",
											"\r",
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    var types = jsonRes.Data.Types;\r",
											"    for(var i = 0; i < types.length; i++) {\r",
											"        var r = types[i];\r",
											"        const x = convertPascalCaseToCapitalSnakeCase(r);\r",
											"        var str = x + \"_DATA_ACTION_TYPE\";\r",
											"        console.log(str);\r",
											"        pm.environment.set(str, types[i]);\r",
											"    }\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Execution status types are returned\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Types');\r",
											"    pm.expect(jsonRes.Data.Types.length).greaterThan(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{MODERATOR_USER_JWT}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/types/data-action-types",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"types",
										"data-action-types"
									]
								},
								"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
							},
							"response": []
						},
						{
							"name": "Get input source types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"isUpperCase = (str) => {\r",
											"    return str.toUpperCase() === str;\r",
											"};\r",
											"\r",
											"convertPascalCaseToCapitalSnakeCase = (str) => {\r",
											"    if (str.length > 0) {\r",
											"        var outstr = \"\";\r",
											"        str = str.replace('-', '');\r",
											"        for (var i = 0; i < str.length; i++) {\r",
											"            var c = str.charAt(i);\r",
											"            if (isUpperCase(c) && i !== 0) {\r",
											"                outstr += '_' + c.toUpperCase();\r",
											"            }\r",
											"            else {\r",
											"                outstr += c.toUpperCase();\r",
											"            }\r",
											"        }\r",
											"        return outstr;\r",
											"    }\r",
											"    return str;\r",
											"};\r",
											"\r",
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    var types = jsonRes.Data.Types;\r",
											"    for(var i = 0; i < types.length; i++) {\r",
											"        var r = types[i];\r",
											"        const x = convertPascalCaseToCapitalSnakeCase(r);\r",
											"        var str = x + \"_INPUT_SOURCE_TYPE\";\r",
											"        console.log(str);\r",
											"        pm.environment.set(str, types[i]);\r",
											"    }\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Execution status types are returned\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Types');\r",
											"    pm.expect(jsonRes.Data.Types.length).greaterThan(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{MODERATOR_USER_JWT}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/types/input-source-types",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"types",
										"input-source-types"
									]
								},
								"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
							},
							"response": []
						},
						{
							"name": "Get output source types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"isUpperCase = (str) => {\r",
											"    return str.toUpperCase() === str;\r",
											"};\r",
											"\r",
											"convertPascalCaseToCapitalSnakeCase = (str) => {\r",
											"    if (str.length > 0) {\r",
											"        var outstr = \"\";\r",
											"        str = str.replace('-', '');\r",
											"        for (var i = 0; i < str.length; i++) {\r",
											"            var c = str.charAt(i);\r",
											"            if (isUpperCase(c) && i !== 0) {\r",
											"                outstr += '_' + c.toUpperCase();\r",
											"            }\r",
											"            else {\r",
											"                outstr += c.toUpperCase();\r",
											"            }\r",
											"        }\r",
											"        return outstr;\r",
											"    }\r",
											"    return str;\r",
											"};\r",
											"\r",
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    var types = jsonRes.Data.Types;\r",
											"    for(var i = 0; i < types.length; i++) {\r",
											"        var r = types[i];\r",
											"        const x = convertPascalCaseToCapitalSnakeCase(r);\r",
											"        var str = x + \"_OUTPUT_SOURCE_TYPE\";\r",
											"        console.log(str);\r",
											"        pm.environment.set(str, types[i]);\r",
											"    }\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Execution status types are returned\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('Types');\r",
											"    pm.expect(jsonRes.Data.Types.length).greaterThan(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{MODERATOR_USER_JWT}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/types/output-source-types",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"types",
										"output-source-types"
									]
								},
								"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
							},
							"response": []
						}
					]
				},
				{
					"name": "Create participant",
					"item": [
						{
							"name": "Create participant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"PARTICIPANT_ID\", jsonRes.Data.id);\r",
											"    pm.environment.set(\"CONTEXT_ID\", jsonRes.Data.Context.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Participant is created\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
											"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Prefix');\r",
											"    pm.expect(jsonRes.Data).to.have.property('FirstName');\r",
											"    pm.expect(jsonRes.Data).to.have.property('LastName');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Email');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Phone');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var today = (new Date()).toISOString().split('T')[0];\r",
											"pm.environment.set(\"TODAY\", today);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{MODERATOR_USER_JWT}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ClientId\": \"{{CLIENT_ID}}\",\r\n    \"ReferenceId\": \"{{REFERENCE_ID}}\",\r\n    \"Prefix\": \"Mr.\",\r\n    \"FirstName\": \"Sachin\",\r\n    \"LastName\": \"Tendulkar\",\r\n    \"Gender\": \"Male\",\r\n    \"BirthDate\": \"1974-04-24\",\r\n    \"Email\": \"sachin.tendulkar@gmail.com\",\r\n    \"CountryCode\": \"+91\",\r\n    \"Phone\": \"1234567891\",\r\n    \"OnboardingDate\": \"{{TODAY}}\"\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/participants",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"participants"
									]
								},
								"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
							},
							"response": []
						},
						{
							"name": "Get participant by reference id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.environment.set(\"PARTICIPANT_ID\", jsonRes.Data.id);\r",
											"    pm.environment.set(\"CONTEXT_ID\", jsonRes.Data.Context.id);\r",
											"}\r",
											"catch (error) {\r",
											"    console.log(error.message);\r",
											"}\r",
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"PArticipant is retrieved\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Context');\r",
											"    pm.expect(jsonRes.Data.Context).to.have.property('id');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Prefix');\r",
											"    pm.expect(jsonRes.Data).to.have.property('FirstName');\r",
											"    pm.expect(jsonRes.Data).to.have.property('LastName');\r",
											"    pm.expect(jsonRes.Data).to.have.property('Email');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Medication 7 Day Badge Rule\",\r\n    \"Description\": \"This rule represents logical steps involved in awarding a badge for consecutive 7 days.\",\r\n    \"ParentNodeId\": \"{{SCHEMA_ROOT_NODE_ID}}\",\r\n    \"Action\": {\r\n        \"ActionType\": \"{{AWARD_BADGE_EVENT_TYPE}}\",\r\n        \"Name\": \"Medication 7-Days Badge\",\r\n        \"Description\": \"This rule represents logical steps involved in awarding a badge for consecutive 7 days.\",\r\n        \"Params\": {\r\n            \"Message\": \"Award medication 7-days badge.\",\r\n            \"Action\": \"{{AWARD_BADGE_EVENT_TYPE}}\",\r\n            \"NextNodeId\": null,\r\n            \"Extra\": {}\r\n        }\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/participants/by-reference-id/{{REFERENCE_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"participants",
										"by-reference-id",
										"{{REFERENCE_ID}}"
									]
								},
								"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
							},
							"response": []
						},
						{
							"name": "Get participants by client id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Status).to.eql('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Schema is created\", function () {\r",
											"    var jsonRes = pm.response.json();\r",
											"    pm.expect(jsonRes.Data.length).greaterThan(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{API_KEY}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{MODERATOR_USER_JWT}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Medication 7 Day Badge Rule\",\r\n    \"Description\": \"This rule represents logical steps involved in awarding a badge for consecutive 7 days.\",\r\n    \"ParentNodeId\": \"{{SCHEMA_ROOT_NODE_ID}}\",\r\n    \"Action\": {\r\n        \"ActionType\": \"{{AWARD_BADGE_EVENT_TYPE}}\",\r\n        \"Name\": \"Medication 7-Days Badge\",\r\n        \"Description\": \"This rule represents logical steps involved in awarding a badge for consecutive 7 days.\",\r\n        \"Params\": {\r\n            \"Message\": \"Award medication 7-days badge.\",\r\n            \"Action\": \"{{AWARD_BADGE_EVENT_TYPE}}\",\r\n            \"NextNodeId\": null,\r\n            \"Extra\": {}\r\n        }\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/participants/by-client-id/{{CLIENT_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"participants",
										"by-client-id",
										"{{CLIENT_ID}}"
									]
								},
								"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
							},
							"response": []
						}
					]
				},
				{
					"name": "Schema",
					"item": [
						{
							"name": "medication badges",
							"item": [
								{
									"name": "Create badge category",
									"item": [
										{
											"name": "Create badge category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"BADGE_CATEGORY_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Participant is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ClientId\": \"{{CLIENT_ID}}\",\r\n    \"Name\": \"Medication\",\r\n    \"Description\": \"Badge category for medication related badges\",\r\n    \"ImageUrl\": \"https://e7.pngegg.com/pngimages/626/893/png-clipart-blue-and-white-check-logo-facebook-social-media-verified-badge-logo-vanity-url-blue-checkmark-blue-angle.png\"\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/badge-categories",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"badge-categories"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Get badge category by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{BASE_URL}}/badge-categories/{{BADGE_CATEGORY_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"badge-categories",
														"{{BADGE_CATEGORY_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										}
									]
								},
								{
									"name": "Schema-7-Day medication adherence badge",
									"item": [
										{
											"name": "Create badge",
											"item": [
												{
													"name": "Create badge",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"try {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.environment.set(\"BADGE_ID\", jsonRes.Data.id);\r",
																	"}\r",
																	"catch (error) {\r",
																	"    console.log(error.message);\r",
																	"}\r",
																	"\r",
																	"pm.test(\"Request is successfull\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Status).to.eql('success');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Participant is created\", function () {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Data).to.have.property('id');\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "x-api-key",
																"value": "{{API_KEY}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{MODERATOR_USER_JWT}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"ClientId\": \"{{CLIENT_ID}}\",\r\n    \"CategoryId\": \"{{BADGE_CATEGORY_ID}}\",\r\n    \"Name\": \"7-Day Medication Adherence\",\r\n    \"Description\": \"Badge awarded for 7-day medication adherence.\",\r\n    \"ImageUrl\": \"https://e7.pngegg.com/pngimages/626/893/png-clipart-blue-and-white-check-logo-facebook-social-media-verified-badge-logo-vanity-url-blue-checkmark-blue-angle.png\"\r\n}"
														},
														"url": {
															"raw": "{{BASE_URL}}/badges",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"badges"
															]
														},
														"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
													},
													"response": []
												},
												{
													"name": "Get badge by id",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"pm.test(\"Request is successfull\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Status).to.eql('success');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Schema is created\", function () {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Data).to.have.property('id');\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "x-api-key",
																"value": "{{API_KEY}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{MODERATOR_USER_JWT}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{BASE_URL}}/badges/{{BADGE_ID}}",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"badges",
																"{{BADGE_ID}}"
															]
														},
														"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
													},
													"response": []
												}
											]
										},
										{
											"name": "Create schema",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"SCHEMA_ID\", jsonRes.Data.id);\r",
															"    pm.environment.set(\"SCHEMA_ROOT_NODE_ID\", jsonRes.Data.RootNode.id);\r",
															"    pm.environment.set(\"NODE_01_ID\", jsonRes.Data.RootNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Schema is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
															"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
															"    pm.expect(jsonRes.Data).to.have.property('RootNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ClientId\": \"{{CLIENT_ID}}\",\r\n    \"Name\": \"Medication 7-Day Badge\",\r\n    \"Description\": \"This schema represents a badge award logic when a patient takes medication regularly for 7 consecutive days. The patient can keep accumulating these badges.\",\r\n    \"Type\": \"Reuse-Existing-Instance\",\r\n    \"EventTypeIds\": [\r\n        \"{{MEDICATION_EVENT_TYPE_ID}}\"\r\n    ],\r\n    \"RootNode\": {\r\n        \"Type\": \"Execution-Node\",\r\n        \"Name\": \"Extract medication data\",\r\n        \"Description\": \"Extract medication data\",\r\n        \"Action\": {\r\n            \"ActionType\": \"Extract-Data\",\r\n            \"Name\": \"Extract medication data\",\r\n            \"InputParams\": {\r\n                \"RecordType\": \"Medication\",\r\n                \"SourceType\": \"Database\",\r\n                \"Filters\": [\r\n                    {\r\n                        \"Key\": \"SamplingMethod\",\r\n                        \"Value\": \"All\"\r\n                    }\r\n                ]\r\n            },\r\n            \"OutputParams\": {\r\n                \"Message\": \"Extracting medication data for the given context.\",\r\n                \"OutputTag\": \"Extract-Data:Medication\",\r\n                \"DestinationType\": \"Almanac\"\r\n            }\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/schema",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"schema"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "01 - Get root Node - Extract medication data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_01_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is retrieved\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_01_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_01_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "02 - Create next node - Calculate Continuity",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_02_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_01_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Name\": \"Calculate continuity\",\r\n    \"Description\": \"This execution step involves calculating the continuity for medication adherence for 7-days.\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Process-Data\",\r\n        \"Name\": \"Calculate Continuity\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Medication\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Extract-Data:Medication\",\r\n            \"DataActionType\": \"Calculate-Continuity\",\r\n            \"KeyDataType\": \"Date\",\r\n            \"KeyName\": \"Date\",\r\n            \"ValueDataType\": \"Boolean\",\r\n            \"ValueName\": \"Taken\",\r\n            \"Value\": true,\r\n            \"Operator\": \"Equal\",\r\n            \"ContinuityCount\": 7\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Processing records for 7-day medication adherence continuity\",\r\n            \"OutputTag\": \"Calculate-Continuity:Medication\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 01",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_02_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_01_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_01_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "03 - Create next node - Extract existing badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_03_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_02_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Get existing badges\",\r\n    \"Description\": \"Extract existing 7-day medication badges for the participant.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Extract-Data\",\r\n        \"Name\": \"Extract-Badges\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Database\",\r\n            \"InputTag\": \"Badge\",\r\n            \"Filters\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"Medication\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"7-Day Medication Adherence\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Extracting 7-day medication adherence badges\",\r\n            \"OutputTag\": \"Extract-Data:Badge\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 02",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_03_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_02_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_02_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "04 - Create next node - Compare badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_04_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_03_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Compare badges\",\r\n    \"Description\": \"Compare calculated badges against existing badges for 7-day medication adherence.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Compare-Data\",\r\n        \"Name\": \"Compare badges\",\r\n        \"Description\": \"Compare calculated badges against existing badges for 7-day medication adherence\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Calculate-Continuity:Medication\",\r\n            \"SecondaryInputTag\": \"Extract-Data:Badge\",\r\n            \"DataActionType\": \"Find-Range-Difference\",\r\n            \"Filters\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"Medication\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"7-Day Medication Adherence\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Comparing badges and get updated badge list for 7-day medication adherence badges.\",\r\n            \"OutputTag\": \"Compare-Data:Badge\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 03",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_04_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_03_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_03_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "05 - Create next node - Store updated badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_05_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_04_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Store updated badges\",\r\n    \"Description\": \"Store updated 7-day medication adherence badges for the participant.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Store-Data\",\r\n        \"Name\": \"Store updated badges\",\r\n        \"Description\": \"Store updated 7-day medication adherence badges for the participant.\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Compare-Data:Badge\",\r\n            \"StorageKeys\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"Medication\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"7-Day Medication Adherence\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeId\",\r\n                    \"Value\": \"{{BADGE_ID}}\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Extracting 7-day medication adherence badges\",\r\n            \"OutputTag\": \"Store-Data:Badge\",\r\n            \"DestinationType\": \"Database\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 04",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_05_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_04_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_04_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Get schema by Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Schema is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
															"    pm.expect(jsonRes.Data).to.have.property('RootNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/schema/{{SCHEMA_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"schema",
														"{{SCHEMA_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										}
									]
								},
								{
									"name": "Schema-15-Day medication adherence badge",
									"item": [
										{
											"name": "Create badge",
											"item": [
												{
													"name": "Create badge",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"try {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.environment.set(\"BADGE_ID\", jsonRes.Data.id);\r",
																	"}\r",
																	"catch (error) {\r",
																	"    console.log(error.message);\r",
																	"}\r",
																	"\r",
																	"pm.test(\"Request is successfull\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Status).to.eql('success');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Participant is created\", function () {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Data).to.have.property('id');\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "x-api-key",
																"value": "{{API_KEY}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{MODERATOR_USER_JWT}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"ClientId\": \"{{CLIENT_ID}}\",\r\n    \"CategoryId\": \"{{BADGE_CATEGORY_ID}}\",\r\n    \"Name\": \"15-Day Medication Adherence\",\r\n    \"Description\": \"Badge awarded for 15-day medication adherence.\",\r\n    \"ImageUrl\": \"https://e7.pngegg.com/pngimages/626/893/png-clipart-blue-and-white-check-logo-facebook-social-media-verified-badge-logo-vanity-url-blue-checkmark-blue-angle.png\"\r\n}"
														},
														"url": {
															"raw": "{{BASE_URL}}/badges",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"badges"
															]
														},
														"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
													},
													"response": []
												},
												{
													"name": "Get badge by id",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"pm.test(\"Request is successfull\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Status).to.eql('success');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Schema is created\", function () {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Data).to.have.property('id');\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "x-api-key",
																"value": "{{API_KEY}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{MODERATOR_USER_JWT}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{BASE_URL}}/badges/{{BADGE_ID}}",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"badges",
																"{{BADGE_ID}}"
															]
														},
														"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
													},
													"response": []
												}
											]
										},
										{
											"name": "Create schema",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"SCHEMA_ID\", jsonRes.Data.id);\r",
															"    pm.environment.set(\"SCHEMA_ROOT_NODE_ID\", jsonRes.Data.RootNode.id);\r",
															"    pm.environment.set(\"NODE_01_ID\", jsonRes.Data.RootNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Schema is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
															"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
															"    pm.expect(jsonRes.Data).to.have.property('RootNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ClientId\": \"{{CLIENT_ID}}\",\r\n    \"Name\": \"Medication 15-Day Badge\",\r\n    \"Description\": \"This schema represents a badge award logic when a patient takes medication regularly for 15 consecutive days. The patient can keep accumulating these badges.\",\r\n    \"Type\": \"Reuse-Existing-Instance\",\r\n    \"EventTypeIds\": [\r\n        \"{{MEDICATION_EVENT_TYPE_ID}}\"\r\n    ],\r\n    \"RootNode\": {\r\n        \"Type\": \"Execution-Node\",\r\n        \"Name\": \"Extract medication data\",\r\n        \"Description\": \"Extract medication data\",\r\n        \"Action\": {\r\n            \"ActionType\": \"Extract-Data\",\r\n            \"Name\": \"Extract medication data\",\r\n            \"InputParams\": {\r\n                \"RecordType\": \"Medication\",\r\n                \"SourceType\": \"Database\",\r\n                \"Filters\": [\r\n                    {\r\n                        \"Key\": \"SamplingMethod\",\r\n                        \"Value\": \"All\"\r\n                    }\r\n                ]\r\n            },\r\n            \"OutputParams\": {\r\n                \"Message\": \"Extracting medication data for the given context.\",\r\n                \"OutputTag\": \"Extract-Data:Medication\",\r\n                \"DestinationType\": \"Almanac\"\r\n            }\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/schema",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"schema"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "01 - Get root Node - Extract medication data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_01_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is retrieved\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_01_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_01_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "02 - Create next node - Calculate Continuity",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_02_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_01_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Name\": \"Calculate continuity\",\r\n    \"Description\": \"This execution step involves calculating the continuity for medication adherence for 15-days.\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Process-Data\",\r\n        \"Name\": \"Calculate Continuity\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Medication\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Extract-Data:Medication\",\r\n            \"DataActionType\": \"Calculate-Continuity\",\r\n            \"KeyDataType\": \"Date\",\r\n            \"KeyName\": \"Date\",\r\n            \"ValueDataType\": \"Boolean\",\r\n            \"ValueName\": \"Taken\",\r\n            \"Value\": true,\r\n            \"Operator\": \"Equal\",\r\n            \"ContinuityCount\": 15\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Processing records for 15-day medication adherence continuity\",\r\n            \"OutputTag\": \"Calculate-Continuity:Medication\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 01",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_02_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_01_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_01_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "03 - Create next node - Extract existing badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_03_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_02_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Get existing badges\",\r\n    \"Description\": \"Extract existing 15-day medication badges for the participant.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Extract-Data\",\r\n        \"Name\": \"Extract-Badges\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Database\",\r\n            \"InputTag\": \"Badge\",\r\n            \"Filters\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"Medication\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"15-Day Medication Adherence\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Extracting 15-day medication adherence badges\",\r\n            \"OutputTag\": \"Extract-Data:Badge\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 02",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_03_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_02_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_02_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "04 - Create next node - Compare badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_04_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_03_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Compare badges\",\r\n    \"Description\": \"Compare calculated badges against existing badges for 15-day medication adherence.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Compare-Data\",\r\n        \"Name\": \"Compare badges\",\r\n        \"Description\": \"Compare calculated badges against existing badges for 15-day medication adherence\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Calculate-Continuity:Medication\",\r\n            \"SecondaryInputTag\": \"Extract-Data:Badge\",\r\n            \"DataActionType\": \"Find-Range-Difference\",\r\n            \"Filters\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"Medication\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"15-Day Medication Adherence\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Comparing badges and get updated badge list for 15-day medication adherence badges.\",\r\n            \"OutputTag\": \"Compare-Data:Badge\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 03",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_04_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_03_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_03_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "05 - Create next node - Store updated badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_05_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_04_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Store updated badges\",\r\n    \"Description\": \"Store updated 15-day medication adherence badges for the participant.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Store-Data\",\r\n        \"Name\": \"Store updated badges\",\r\n        \"Description\": \"Store updated 15-day medication adherence badges for the participant.\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Compare-Data:Badge\",\r\n            \"StorageKeys\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"Medication\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"15-Day Medication Adherence\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeId\",\r\n                    \"Value\": \"{{BADGE_ID}}\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Extracting 15-day medication adherence badges\",\r\n            \"OutputTag\": \"Store-Data:Badge\",\r\n            \"DestinationType\": \"Database\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 04",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_05_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_04_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_04_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Get schema by Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Schema is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
															"    pm.expect(jsonRes.Data).to.have.property('RootNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/schema/{{SCHEMA_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"schema",
														"{{SCHEMA_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										}
									]
								},
								{
									"name": "Schema-30-Day medication adherence badge",
									"item": [
										{
											"name": "Create badge",
											"item": [
												{
													"name": "Create badge",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"try {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.environment.set(\"BADGE_ID\", jsonRes.Data.id);\r",
																	"}\r",
																	"catch (error) {\r",
																	"    console.log(error.message);\r",
																	"}\r",
																	"\r",
																	"pm.test(\"Request is successfull\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Status).to.eql('success');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Participant is created\", function () {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Data).to.have.property('id');\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "x-api-key",
																"value": "{{API_KEY}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{MODERATOR_USER_JWT}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"ClientId\": \"{{CLIENT_ID}}\",\r\n    \"CategoryId\": \"{{BADGE_CATEGORY_ID}}\",\r\n    \"Name\": \"30-Day Medication Adherence\",\r\n    \"Description\": \"Badge awarded for 30-day medication adherence.\",\r\n    \"ImageUrl\": \"https://e7.pngegg.com/pngimages/626/893/png-clipart-blue-and-white-check-logo-facebook-social-media-verified-badge-logo-vanity-url-blue-checkmark-blue-angle.png\"\r\n}"
														},
														"url": {
															"raw": "{{BASE_URL}}/badges",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"badges"
															]
														},
														"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
													},
													"response": []
												},
												{
													"name": "Get badge by id",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"pm.test(\"Request is successfull\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Status).to.eql('success');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Schema is created\", function () {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Data).to.have.property('id');\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "x-api-key",
																"value": "{{API_KEY}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{MODERATOR_USER_JWT}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{BASE_URL}}/badges/{{BADGE_ID}}",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"badges",
																"{{BADGE_ID}}"
															]
														},
														"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
													},
													"response": []
												}
											]
										},
										{
											"name": "Create schema",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"SCHEMA_ID\", jsonRes.Data.id);\r",
															"    pm.environment.set(\"SCHEMA_ROOT_NODE_ID\", jsonRes.Data.RootNode.id);\r",
															"    pm.environment.set(\"NODE_01_ID\", jsonRes.Data.RootNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Schema is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
															"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
															"    pm.expect(jsonRes.Data).to.have.property('RootNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ClientId\": \"{{CLIENT_ID}}\",\r\n    \"Name\": \"Medication 30-Day Badge\",\r\n    \"Description\": \"This schema represents a badge award logic when a patient takes medication regularly for 30 consecutive days. The patient can keep accumulating these badges.\",\r\n    \"Type\": \"Reuse-Existing-Instance\",\r\n    \"EventTypeIds\": [\r\n        \"{{MEDICATION_EVENT_TYPE_ID}}\"\r\n    ],\r\n    \"RootNode\": {\r\n        \"Type\": \"Execution-Node\",\r\n        \"Name\": \"Extract medication data\",\r\n        \"Description\": \"Extract medication data\",\r\n        \"Action\": {\r\n            \"ActionType\": \"Extract-Data\",\r\n            \"Name\": \"Extract medication data\",\r\n            \"InputParams\": {\r\n                \"RecordType\": \"Medication\",\r\n                \"SourceType\": \"Database\",\r\n                \"Filters\": [\r\n                    {\r\n                        \"Key\": \"SamplingMethod\",\r\n                        \"Value\": \"All\"\r\n                    }\r\n                ]\r\n            },\r\n            \"OutputParams\": {\r\n                \"Message\": \"Extracting medication data for the given context.\",\r\n                \"OutputTag\": \"Extract-Data:Medication\",\r\n                \"DestinationType\": \"Almanac\"\r\n            }\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/schema",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"schema"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "01 - Get root Node - Extract medication data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_01_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is retrieved\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_01_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_01_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "02 - Create next node - Calculate Continuity",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_02_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_01_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Name\": \"Calculate continuity\",\r\n    \"Description\": \"This execution step involves calculating the continuity for medication adherence for 30-days.\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Process-Data\",\r\n        \"Name\": \"Calculate Continuity\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Medication\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Extract-Data:Medication\",\r\n            \"DataActionType\": \"Calculate-Continuity\",\r\n            \"KeyDataType\": \"Date\",\r\n            \"KeyName\": \"Date\",\r\n            \"ValueDataType\": \"Boolean\",\r\n            \"ValueName\": \"Taken\",\r\n            \"Value\": true,\r\n            \"Operator\": \"Equal\",\r\n            \"ContinuityCount\": 30\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Processing records for 30-day medication adherence continuity\",\r\n            \"OutputTag\": \"Calculate-Continuity:Medication\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 01",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_02_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_01_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_01_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "03 - Create next node - Extract existing badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_03_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_02_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Get existing badges\",\r\n    \"Description\": \"Extract existing 30-day medication badges for the participant.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Extract-Data\",\r\n        \"Name\": \"Extract-Badges\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Database\",\r\n            \"InputTag\": \"Badge\",\r\n            \"Filters\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"Medication\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"30-Day Medication Adherence\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Extracting 30-day medication adherence badges\",\r\n            \"OutputTag\": \"Extract-Data:Badge\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 02",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_03_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_02_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_02_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "04 - Create next node - Compare badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_04_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_03_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Compare badges\",\r\n    \"Description\": \"Compare calculated badges against existing badges for 30-day medication adherence.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Compare-Data\",\r\n        \"Name\": \"Compare badges\",\r\n        \"Description\": \"Compare calculated badges against existing badges for 30-day medication adherence\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Calculate-Continuity:Medication\",\r\n            \"SecondaryInputTag\": \"Extract-Data:Badge\",\r\n            \"DataActionType\": \"Find-Range-Difference\",\r\n            \"Filters\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"Medication\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"30-Day Medication Adherence\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Comparing badges and get updated badge list for 30-day medication adherence badges.\",\r\n            \"OutputTag\": \"Compare-Data:Badge\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 03",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_04_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_03_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_03_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "05 - Create next node - Store updated badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_05_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_04_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Store updated badges\",\r\n    \"Description\": \"Store updated 30-day medication adherence badges for the participant.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Store-Data\",\r\n        \"Name\": \"Store updated badges\",\r\n        \"Description\": \"Store updated 30-day medication adherence badges for the participant.\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Compare-Data:Badge\",\r\n            \"StorageKeys\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"Medication\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"30-Day Medication Adherence\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeId\",\r\n                    \"Value\": \"{{BADGE_ID}}\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Extracting 30-day medication adherence badges\",\r\n            \"OutputTag\": \"Store-Data:Badge\",\r\n            \"DestinationType\": \"Database\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 04",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_05_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_04_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_04_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Get schema by Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Schema is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
															"    pm.expect(jsonRes.Data).to.have.property('RootNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/schema/{{SCHEMA_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"schema",
														"{{SCHEMA_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "nutrition badges",
							"item": [
								{
									"name": "Create badge category",
									"item": [
										{
											"name": "Create badge category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"BADGE_CATEGORY_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Participant is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ClientId\": \"{{CLIENT_ID}}\",\r\n    \"Name\": \"Nutrition\",\r\n    \"Description\": \"Badge category for nutrition related badges\",\r\n    \"ImageUrl\": \"https://e7.pngegg.com/pngimages/626/893/png-clipart-blue-and-white-check-logo-facebook-social-media-verified-badge-logo-vanity-url-blue-checkmark-blue-angle.png\"\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/badge-categories",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"badge-categories"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Get badge category by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{BASE_URL}}/badge-categories/{{BADGE_CATEGORY_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"badge-categories",
														"{{BADGE_CATEGORY_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										}
									]
								},
								{
									"name": "Schema-7-Day healthy nutrition choice badge",
									"item": [
										{
											"name": "Create badge",
											"item": [
												{
													"name": "Create badge",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"try {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.environment.set(\"BADGE_ID\", jsonRes.Data.id);\r",
																	"}\r",
																	"catch (error) {\r",
																	"    console.log(error.message);\r",
																	"}\r",
																	"\r",
																	"pm.test(\"Request is successfull\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Status).to.eql('success');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Participant is created\", function () {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Data).to.have.property('id');\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "x-api-key",
																"value": "{{API_KEY}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{MODERATOR_USER_JWT}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"ClientId\": \"{{CLIENT_ID}}\",\r\n    \"CategoryId\": \"{{BADGE_CATEGORY_ID}}\",\r\n    \"Name\": \"7-Day Healthy Nutrition Choice\",\r\n    \"Description\": \"Badge awarded choosing healthy nutrition choices for 7-days consistently.\",\r\n    \"ImageUrl\": \"https://e7.pngegg.com/pngimages/626/893/png-clipart-blue-and-white-check-logo-facebook-social-media-verified-badge-logo-vanity-url-blue-checkmark-blue-angle.png\"\r\n}"
														},
														"url": {
															"raw": "{{BASE_URL}}/badges",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"badges"
															]
														},
														"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
													},
													"response": []
												},
												{
													"name": "Get badge by id",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"pm.test(\"Request is successfull\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Status).to.eql('success');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Schema is created\", function () {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Data).to.have.property('id');\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "x-api-key",
																"value": "{{API_KEY}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{MODERATOR_USER_JWT}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{BASE_URL}}/badges/{{BADGE_ID}}",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"badges",
																"{{BADGE_ID}}"
															]
														},
														"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
													},
													"response": []
												}
											]
										},
										{
											"name": "Create schema",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"SCHEMA_ID\", jsonRes.Data.id);\r",
															"    pm.environment.set(\"SCHEMA_ROOT_NODE_ID\", jsonRes.Data.RootNode.id);\r",
															"    pm.environment.set(\"NODE_01_ID\", jsonRes.Data.RootNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Schema is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
															"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
															"    pm.expect(jsonRes.Data).to.have.property('RootNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ClientId\": \"{{CLIENT_ID}}\",\r\n    \"Name\": \"Nutrition 7-Day Badge\",\r\n    \"Description\": \"This schema represents a badge award logic when a patient takes chooses healthy nutrition for 7 consecutive days. The patient can keep accumulating these badges.\",\r\n    \"Type\": \"Reuse-Existing-Instance\",\r\n    \"EventTypeIds\": [\r\n        \"{{NUTRITION_EVENT_TYPE_ID}}\"\r\n    ],\r\n    \"RootNode\": {\r\n        \"Type\": \"Execution-Node\",\r\n        \"Name\": \"Extract nutrition data\",\r\n        \"Description\": \"Extract nutrition data\",\r\n        \"Action\": {\r\n            \"ActionType\": \"Extract-Data\",\r\n            \"Name\": \"Extract nutrition data\",\r\n            \"InputParams\": {\r\n                \"RecordType\": \"Nutrition\",\r\n                \"SourceType\": \"Database\",\r\n                \"Filters\": [\r\n                    {\r\n                        \"Key\": \"SamplingMethod\",\r\n                        \"Value\": \"Any\"\r\n                    }\r\n                ]\r\n            },\r\n            \"OutputParams\": {\r\n                \"Message\": \"Extracting nutrition data for the given context.\",\r\n                \"OutputTag\": \"Extract-Data:Nutrition\",\r\n                \"DestinationType\": \"Almanac\"\r\n            }\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/schema",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"schema"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "01 - Get root Node - Extract nutrition data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_01_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is retrieved\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_01_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_01_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "02 - Create next node - Calculate Continuity",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_02_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_01_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Name\": \"Calculate continuity\",\r\n    \"Description\": \"This execution step involves calculating the continuity for healthy nutrition choice consecutively for 7-days.\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Process-Data\",\r\n        \"Name\": \"Calculate Continuity\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Nutrition\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Extract-Data:Nutrition\",\r\n            \"DataActionType\": \"Calculate-Continuity\",\r\n            \"KeyDataType\": \"Date\",\r\n            \"KeyName\": \"Date\",\r\n            \"ValueDataType\": \"Boolean\",\r\n            \"ValueName\": \"UserResponse\",\r\n            \"Value\": true,\r\n            \"Operator\": \"Equal\",\r\n            \"ContinuityCount\": 7\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Processing records for 7-day nutrition choice continuity\",\r\n            \"OutputTag\": \"Calculate-Continuity:Nutrition\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 01",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_02_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_01_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_01_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "03 - Create next node - Extract existing badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_03_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_02_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Get existing badges\",\r\n    \"Description\": \"Extract existing 7-day healthy nutrition choice badges for the participant.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Extract-Data\",\r\n        \"Name\": \"Extract-Badges\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Database\",\r\n            \"InputTag\": \"Badge\",\r\n            \"Filters\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"Nutrition\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"7-Day Healthy Nutrition Choice\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Extracting 7-day 7-Day Healthy Nutrition Choice badges\",\r\n            \"OutputTag\": \"Extract-Data:Badge\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 02",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_03_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_02_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_02_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "04 - Create next node - Compare badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_04_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_03_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Compare badges\",\r\n    \"Description\": \"Compare calculated badges against existing badges for 7-day healthy nutrition choice.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Compare-Data\",\r\n        \"Name\": \"Compare badges\",\r\n        \"Description\": \"Compare calculated badges against existing badges for 7-day healthy nutrition choice\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Calculate-Continuity:Nutrition\",\r\n            \"SecondaryInputTag\": \"Extract-Data:Badge\",\r\n            \"DataActionType\": \"Find-Range-Difference\",\r\n            \"Filters\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"Nutrition\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"7-Day Healthy Nutrition Choice\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Comparing badges and get updated badge list for 7-Day healthy nutrition choice badges.\",\r\n            \"OutputTag\": \"Compare-Data:Badge\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 03",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_04_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_03_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_03_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "05 - Create next node - Store updated badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_05_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_04_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Store updated badges\",\r\n    \"Description\": \"Store updated 7-day healthy nutrition choice badges for the participant.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Store-Data\",\r\n        \"Name\": \"Store updated badges\",\r\n        \"Description\": \"Store updated 7-day healthy nutrition choice badges for the participant.\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Compare-Data:Badge\",\r\n            \"StorageKeys\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"Nutrition\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"7-Day Healthy Nutrition Choice\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeId\",\r\n                    \"Value\": \"{{BADGE_ID}}\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Extracting 7-day healthy nutrition choice badges\",\r\n            \"OutputTag\": \"Store-Data:Badge\",\r\n            \"DestinationType\": \"Database\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 04",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_05_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_04_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_04_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Get schema by Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Schema is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
															"    pm.expect(jsonRes.Data).to.have.property('RootNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/schema/{{SCHEMA_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"schema",
														"{{SCHEMA_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										}
									]
								},
								{
									"name": "Schema-15-Day healthy nutrition choice badge",
									"item": [
										{
											"name": "Create badge",
											"item": [
												{
													"name": "Create badge",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"try {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.environment.set(\"BADGE_ID\", jsonRes.Data.id);\r",
																	"}\r",
																	"catch (error) {\r",
																	"    console.log(error.message);\r",
																	"}\r",
																	"\r",
																	"pm.test(\"Request is successfull\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Status).to.eql('success');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Participant is created\", function () {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Data).to.have.property('id');\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "x-api-key",
																"value": "{{API_KEY}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{MODERATOR_USER_JWT}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"ClientId\": \"{{CLIENT_ID}}\",\r\n    \"CategoryId\": \"{{BADGE_CATEGORY_ID}}\",\r\n    \"Name\": \"15-Day Healthy Nutrition Choice\",\r\n    \"Description\": \"Badge awarded choosing healthy nutrition choices for 15-days consistently.\",\r\n    \"ImageUrl\": \"https://e7.pngegg.com/pngimages/626/893/png-clipart-blue-and-white-check-logo-facebook-social-media-verified-badge-logo-vanity-url-blue-checkmark-blue-angle.png\"\r\n}"
														},
														"url": {
															"raw": "{{BASE_URL}}/badges",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"badges"
															]
														},
														"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
													},
													"response": []
												},
												{
													"name": "Get badge by id",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"pm.test(\"Request is successfull\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Status).to.eql('success');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Schema is created\", function () {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Data).to.have.property('id');\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "x-api-key",
																"value": "{{API_KEY}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{MODERATOR_USER_JWT}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{BASE_URL}}/badges/{{BADGE_ID}}",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"badges",
																"{{BADGE_ID}}"
															]
														},
														"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
													},
													"response": []
												}
											]
										},
										{
											"name": "Create schema",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"SCHEMA_ID\", jsonRes.Data.id);\r",
															"    pm.environment.set(\"SCHEMA_ROOT_NODE_ID\", jsonRes.Data.RootNode.id);\r",
															"    pm.environment.set(\"NODE_01_ID\", jsonRes.Data.RootNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Schema is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
															"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
															"    pm.expect(jsonRes.Data).to.have.property('RootNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ClientId\": \"{{CLIENT_ID}}\",\r\n    \"Name\": \"Nutrition 15-Day Badge\",\r\n    \"Description\": \"This schema represents a badge award logic when a patient takes chooses healthy nutrition for 15 consecutive days. The patient can keep accumulating these badges.\",\r\n    \"Type\": \"Reuse-Existing-Instance\",\r\n    \"EventTypeIds\": [\r\n        \"{{NUTRITION_EVENT_TYPE_ID}}\"\r\n    ],\r\n    \"RootNode\": {\r\n        \"Type\": \"Execution-Node\",\r\n        \"Name\": \"Extract nutrition data\",\r\n        \"Description\": \"Extract nutrition data\",\r\n        \"Action\": {\r\n            \"ActionType\": \"Extract-Data\",\r\n            \"Name\": \"Extract nutrition data\",\r\n            \"InputParams\": {\r\n                \"RecordType\": \"Nutrition\",\r\n                \"SourceType\": \"Database\",\r\n                \"Filters\": [\r\n                    {\r\n                        \"Key\": \"SamplingMethod\",\r\n                        \"Value\": \"Any\"\r\n                    }\r\n                ]\r\n            },\r\n            \"OutputParams\": {\r\n                \"Message\": \"Extracting nutrition data for the given context.\",\r\n                \"OutputTag\": \"Extract-Data:Nutrition\",\r\n                \"DestinationType\": \"Almanac\"\r\n            }\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/schema",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"schema"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "01 - Get root Node - Extract nutrition data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_01_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is retrieved\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_01_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_01_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "02 - Create next node - Calculate Continuity",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_02_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_01_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Name\": \"Calculate continuity\",\r\n    \"Description\": \"This execution step involves calculating the continuity for healthy nutrition choice consecutively for 15-days.\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Process-Data\",\r\n        \"Name\": \"Calculate Continuity\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Nutrition\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Extract-Data:Nutrition\",\r\n            \"DataActionType\": \"Calculate-Continuity\",\r\n            \"KeyDataType\": \"Date\",\r\n            \"KeyName\": \"Date\",\r\n            \"ValueDataType\": \"Boolean\",\r\n            \"ValueName\": \"UserResponse\",\r\n            \"Value\": true,\r\n            \"Operator\": \"Equal\",\r\n            \"ContinuityCount\": 15\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Processing records for 15-day nutrition choice continuity\",\r\n            \"OutputTag\": \"Calculate-Continuity:Nutrition\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 01",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_02_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_01_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_01_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "03 - Create next node - Extract existing badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_03_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_02_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Get existing badges\",\r\n    \"Description\": \"Extract existing 15-day healthy nutrition choice badges for the participant.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Extract-Data\",\r\n        \"Name\": \"Extract-Badges\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Database\",\r\n            \"InputTag\": \"Badge\",\r\n            \"Filters\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"Nutrition\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"15-Day Healthy Nutrition Choice\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Extracting 15-day healthy nutrition choice badges\",\r\n            \"OutputTag\": \"Extract-Data:Badge\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 02",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_03_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_02_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_02_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "04 - Create next node - Compare badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_04_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_03_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Compare badges\",\r\n    \"Description\": \"Compare calculated badges against existing badges for 15-day healthy nutrition choice.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Compare-Data\",\r\n        \"Name\": \"Compare badges\",\r\n        \"Description\": \"Compare calculated badges against existing badges for 15-day healthy nutrition choice\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Calculate-Continuity:Nutrition\",\r\n            \"SecondaryInputTag\": \"Extract-Data:Badge\",\r\n            \"DataActionType\": \"Find-Range-Difference\",\r\n            \"Filters\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"Nutrition\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"15-Day Healthy Nutrition Choice\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Comparing badges and get updated badge list for 15-Day healthy nutrition choice badges.\",\r\n            \"OutputTag\": \"Compare-Data:Badge\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 03",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_04_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_03_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_03_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "05 - Create next node - Store updated badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_05_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_04_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Store updated badges\",\r\n    \"Description\": \"Store updated 15-day healthy nutrition choice badges for the participant.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Store-Data\",\r\n        \"Name\": \"Store updated badges\",\r\n        \"Description\": \"Store updated 15-day healthy nutrition choice badges for the participant.\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Compare-Data:Badge\",\r\n            \"StorageKeys\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"Medication\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"15-Day Healthy Nutrition Choice\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeId\",\r\n                    \"Value\": \"{{BADGE_ID}}\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Extracting 15-day healthy nutrition choice badges\",\r\n            \"OutputTag\": \"Store-Data:Badge\",\r\n            \"DestinationType\": \"Database\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 04",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_05_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_04_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_04_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Get schema by Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Schema is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
															"    pm.expect(jsonRes.Data).to.have.property('RootNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/schema/{{SCHEMA_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"schema",
														"{{SCHEMA_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										}
									]
								},
								{
									"name": "Schema-30-Day healthy nutrition choice badge",
									"item": [
										{
											"name": "Create badge",
											"item": [
												{
													"name": "Create badge",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"try {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.environment.set(\"BADGE_ID\", jsonRes.Data.id);\r",
																	"}\r",
																	"catch (error) {\r",
																	"    console.log(error.message);\r",
																	"}\r",
																	"\r",
																	"pm.test(\"Request is successfull\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Status).to.eql('success');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Participant is created\", function () {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Data).to.have.property('id');\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "x-api-key",
																"value": "{{API_KEY}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{MODERATOR_USER_JWT}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"ClientId\": \"{{CLIENT_ID}}\",\r\n    \"CategoryId\": \"{{BADGE_CATEGORY_ID}}\",\r\n    \"Name\": \"30-Day Healthy Nutrition Choice\",\r\n    \"Description\": \"Badge awarded choosing healthy nutrition choices for 30-days consistently.\",\r\n    \"ImageUrl\": \"https://e7.pngegg.com/pngimages/626/893/png-clipart-blue-and-white-check-logo-facebook-social-media-verified-badge-logo-vanity-url-blue-checkmark-blue-angle.png\"\r\n}"
														},
														"url": {
															"raw": "{{BASE_URL}}/badges",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"badges"
															]
														},
														"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
													},
													"response": []
												},
												{
													"name": "Get badge by id",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"pm.test(\"Request is successfull\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Status).to.eql('success');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Schema is created\", function () {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Data).to.have.property('id');\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "x-api-key",
																"value": "{{API_KEY}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{MODERATOR_USER_JWT}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{BASE_URL}}/badges/{{BADGE_ID}}",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"badges",
																"{{BADGE_ID}}"
															]
														},
														"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
													},
													"response": []
												}
											]
										},
										{
											"name": "Create schema",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"SCHEMA_ID\", jsonRes.Data.id);\r",
															"    pm.environment.set(\"SCHEMA_ROOT_NODE_ID\", jsonRes.Data.RootNode.id);\r",
															"    pm.environment.set(\"NODE_01_ID\", jsonRes.Data.RootNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Schema is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
															"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
															"    pm.expect(jsonRes.Data).to.have.property('RootNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ClientId\": \"{{CLIENT_ID}}\",\r\n    \"Name\": \"Nutrition 30-Day Badge\",\r\n    \"Description\": \"This schema represents a badge award logic when a patient takes chooses healthy nutrition for 30 consecutive days. The patient can keep accumulating these badges.\",\r\n    \"Type\": \"Reuse-Existing-Instance\",\r\n    \"EventTypeIds\": [\r\n        \"{{NUTRITION_EVENT_TYPE_ID}}\"\r\n    ],\r\n    \"RootNode\": {\r\n        \"Type\": \"Execution-Node\",\r\n        \"Name\": \"Extract nutrition data\",\r\n        \"Description\": \"Extract nutrition data\",\r\n        \"Action\": {\r\n            \"ActionType\": \"Extract-Data\",\r\n            \"Name\": \"Extract nutrition data\",\r\n            \"InputParams\": {\r\n                \"RecordType\": \"Nutrition\",\r\n                \"SourceType\": \"Database\",\r\n                \"Filters\": [\r\n                    {\r\n                        \"Key\": \"SamplingMethod\",\r\n                        \"Value\": \"Any\"\r\n                    }\r\n                ]\r\n            },\r\n            \"OutputParams\": {\r\n                \"Message\": \"Extracting nutrition data for the given context.\",\r\n                \"OutputTag\": \"Extract-Data:Nutrition\",\r\n                \"DestinationType\": \"Almanac\"\r\n            }\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/schema",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"schema"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "01 - Get root Node - Extract nutrition data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_01_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is retrieved\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_01_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_01_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "02 - Create next node - Calculate Continuity",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_02_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_01_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Name\": \"Calculate continuity\",\r\n    \"Description\": \"This execution step involves calculating the continuity for healthy nutrition choice consecutively for 30-days.\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Process-Data\",\r\n        \"Name\": \"Calculate Continuity\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Nutrition\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Extract-Data:Nutrition\",\r\n            \"DataActionType\": \"Calculate-Continuity\",\r\n            \"KeyDataType\": \"Date\",\r\n            \"KeyName\": \"Date\",\r\n            \"ValueDataType\": \"Boolean\",\r\n            \"ValueName\": \"UserResponse\",\r\n            \"Value\": true,\r\n            \"Operator\": \"Equal\",\r\n            \"ContinuityCount\": 30\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Processing records for 30-day nutrition choice continuity\",\r\n            \"OutputTag\": \"Calculate-Continuity:Nutrition\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 01",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_02_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_01_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_01_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "03 - Create next node - Extract existing badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_03_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_02_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Get existing badges\",\r\n    \"Description\": \"Extract existing 30-day healthy nutrition choice badges for the participant.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Extract-Data\",\r\n        \"Name\": \"Extract-Badges\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Database\",\r\n            \"InputTag\": \"Badge\",\r\n            \"Filters\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"Nutrition\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"30-Day Healthy Nutrition Choice\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Extracting 30-day healthy nutrition choice badges\",\r\n            \"OutputTag\": \"Extract-Data:Badge\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 02",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_03_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_02_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_02_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "04 - Create next node - Compare badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_04_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_03_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Compare badges\",\r\n    \"Description\": \"Compare calculated badges against existing badges for 30-day healthy nutrition choice.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Compare-Data\",\r\n        \"Name\": \"Compare badges\",\r\n        \"Description\": \"Compare calculated badges against existing badges for 30-day healthy nutrition choice\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Calculate-Continuity:Nutrition\",\r\n            \"SecondaryInputTag\": \"Extract-Data:Badge\",\r\n            \"DataActionType\": \"Find-Range-Difference\",\r\n            \"Filters\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"Nutrition\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"30-Day Healthy Nutrition Choice\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Comparing badges and get updated badge list for 30-Day healthy nutrition choice badges.\",\r\n            \"OutputTag\": \"Compare-Data:Badge\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 03",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_04_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_03_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_03_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "05 - Create next node - Store updated badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_05_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_04_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Store updated badges\",\r\n    \"Description\": \"Store updated 30-day healthy nutrition choice badges for the participant.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Store-Data\",\r\n        \"Name\": \"Store updated badges\",\r\n        \"Description\": \"Store updated 30-day healthy nutrition choice badges for the participant.\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Compare-Data:Badge\",\r\n            \"StorageKeys\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"Medication\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"30-Day Healthy Nutrition Choice\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeId\",\r\n                    \"Value\": \"{{BADGE_ID}}\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Extracting 30-day healthy nutrition choice badges\",\r\n            \"OutputTag\": \"Store-Data:Badge\",\r\n            \"DestinationType\": \"Database\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 04",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_05_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_04_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_04_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Get schema by Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Schema is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
															"    pm.expect(jsonRes.Data).to.have.property('RootNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/schema/{{SCHEMA_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"schema",
														"{{SCHEMA_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "exercise badges",
							"item": [
								{
									"name": "Create badge category",
									"item": [
										{
											"name": "Create badge category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"BADGE_CATEGORY_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Participant is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ClientId\": \"{{CLIENT_ID}}\",\r\n    \"Name\": \"Exercise\",\r\n    \"Description\": \"Badge category for exercise related badges\",\r\n    \"ImageUrl\": \"https://e7.pngegg.com/pngimages/626/893/png-clipart-blue-and-white-check-logo-facebook-social-media-verified-badge-logo-vanity-url-blue-checkmark-blue-angle.png\"\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/badge-categories",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"badge-categories"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Get badge category by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{BASE_URL}}/badge-categories/{{BADGE_CATEGORY_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"badge-categories",
														"{{BADGE_CATEGORY_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										}
									]
								},
								{
									"name": "Schema-7-Day exercise badge",
									"item": [
										{
											"name": "Create badge",
											"item": [
												{
													"name": "Create badge",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"try {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.environment.set(\"BADGE_ID\", jsonRes.Data.id);\r",
																	"}\r",
																	"catch (error) {\r",
																	"    console.log(error.message);\r",
																	"}\r",
																	"\r",
																	"pm.test(\"Request is successfull\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Status).to.eql('success');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Participant is created\", function () {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Data).to.have.property('id');\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "x-api-key",
																"value": "{{API_KEY}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{MODERATOR_USER_JWT}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"ClientId\": \"{{CLIENT_ID}}\",\r\n    \"CategoryId\": \"{{BADGE_CATEGORY_ID}}\",\r\n    \"Name\": \"7-Day Physical Activity\",\r\n    \"Description\": \"Badge awarded doing exercise for 7-days consistently.\",\r\n    \"ImageUrl\": \"https://e7.pngegg.com/pngimages/626/893/png-clipart-blue-and-white-check-logo-facebook-social-media-verified-badge-logo-vanity-url-blue-checkmark-blue-angle.png\"\r\n}"
														},
														"url": {
															"raw": "{{BASE_URL}}/badges",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"badges"
															]
														},
														"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
													},
													"response": []
												},
												{
													"name": "Get badge by id",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"pm.test(\"Request is successfull\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Status).to.eql('success');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Schema is created\", function () {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Data).to.have.property('id');\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "x-api-key",
																"value": "{{API_KEY}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{MODERATOR_USER_JWT}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{BASE_URL}}/badges/{{BADGE_ID}}",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"badges",
																"{{BADGE_ID}}"
															]
														},
														"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
													},
													"response": []
												}
											]
										},
										{
											"name": "Create schema",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"SCHEMA_ID\", jsonRes.Data.id);\r",
															"    pm.environment.set(\"SCHEMA_ROOT_NODE_ID\", jsonRes.Data.RootNode.id);\r",
															"    pm.environment.set(\"NODE_01_ID\", jsonRes.Data.RootNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Schema is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
															"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
															"    pm.expect(jsonRes.Data).to.have.property('RootNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ClientId\": \"{{CLIENT_ID}}\",\r\n    \"Name\": \"Exercise 7-Day Badge\",\r\n    \"Description\": \"This schema represents a badge award logic when a patient does physical activity(exercise) for 7 consecutive days. The patient can keep accumulating these badges.\",\r\n    \"Type\": \"Reuse-Existing-Instance\",\r\n    \"EventTypeIds\": [\r\n        \"{{EXERCISE_EVENT_TYPE_ID}}\"\r\n    ],\r\n    \"RootNode\": {\r\n        \"Type\": \"Execution-Node\",\r\n        \"Name\": \"Extract exercise data\",\r\n        \"Description\": \"Extract exercise data\",\r\n        \"Action\": {\r\n            \"ActionType\": \"Extract-Data\",\r\n            \"Name\": \"Extract exercise data\",\r\n            \"InputParams\": {\r\n                \"RecordType\": \"Exercise\",\r\n                \"SourceType\": \"Database\",\r\n                \"Filters\": [\r\n                    {\r\n                        \"Key\": \"SamplingMethod\",\r\n                        \"Value\": \"Any\"\r\n                    }\r\n                ]\r\n            },\r\n            \"OutputParams\": {\r\n                \"Message\": \"Extracting exercise data for the given context.\",\r\n                \"OutputTag\": \"Extract-Data:Exercise\",\r\n                \"DestinationType\": \"Almanac\"\r\n            }\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/schema",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"schema"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "01 - Get root Node - Extract nutrition data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_01_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is retrieved\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_01_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_01_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "02 - Create next node - Calculate Continuity",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_02_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_01_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Name\": \"Calculate continuity\",\r\n    \"Description\": \"This execution step involves calculating the continuity for doing exercise consecutively for 7-days.\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Process-Data\",\r\n        \"Name\": \"Calculate Continuity\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Exercise\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Extract-Data:Exercise\",\r\n            \"DataActionType\": \"Calculate-Continuity\",\r\n            \"KeyDataType\": \"Date\",\r\n            \"KeyName\": \"Date\",\r\n            \"ValueDataType\": \"Boolean\",\r\n            \"ValueName\": \"PhysicalActivityQuestionAns\",\r\n            \"Value\": true,\r\n            \"Operator\": \"Equal\",\r\n            \"ContinuityCount\": 7\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Processing records for 7-day exercise choice continuity\",\r\n            \"OutputTag\": \"Calculate-Continuity:Exercise\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 01",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_02_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_01_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_01_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "03 - Create next node - Extract existing badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_03_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_02_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Get existing badges\",\r\n    \"Description\": \"Extract existing 7-day exercise badges for the participant.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Extract-Data\",\r\n        \"Name\": \"Extract-Badges\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Database\",\r\n            \"InputTag\": \"Badge\",\r\n            \"Filters\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"Exercise\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"7-Day Physical Activity\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Extracting 7-day exercise badges\",\r\n            \"OutputTag\": \"Extract-Data:Badge\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 02",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_03_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_02_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_02_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "04 - Create next node - Compare badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_04_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_03_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Compare badges\",\r\n    \"Description\": \"Compare calculated badges against existing badges for 7-day exercise physical activity.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Compare-Data\",\r\n        \"Name\": \"Compare badges\",\r\n        \"Description\": \"Compare calculated badges against existing badges for 7-day exercise physical activity\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Calculate-Continuity:Exercise\",\r\n            \"SecondaryInputTag\": \"Extract-Data:Badge\",\r\n            \"DataActionType\": \"Find-Range-Difference\",\r\n            \"Filters\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"Exercise\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"7-Day Physical Activity\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Comparing badges and get updated badge list for 7-day exercise physical activity badges.\",\r\n            \"OutputTag\": \"Compare-Data:Badge\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 03",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_04_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_03_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_03_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "05 - Create next node - Store updated badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_05_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_04_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Store updated badges\",\r\n    \"Description\": \"Store updated 7-day exercise physical activity badges for the participant.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Store-Data\",\r\n        \"Name\": \"Store updated badges\",\r\n        \"Description\": \"Store updated 7-day exercise physical activity badges for the participant.\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Compare-Data:Badge\",\r\n            \"StorageKeys\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"Exercise\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"7-Day Physical Activity\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeId\",\r\n                    \"Value\": \"{{BADGE_ID}}\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Extracting 7-day exercise physical activity badges\",\r\n            \"OutputTag\": \"Store-Data:Badge\",\r\n            \"DestinationType\": \"Database\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 04",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_05_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_04_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_04_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Get schema by Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Schema is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
															"    pm.expect(jsonRes.Data).to.have.property('RootNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/schema/{{SCHEMA_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"schema",
														"{{SCHEMA_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										}
									]
								},
								{
									"name": "Schema-15-Day exercise badge",
									"item": [
										{
											"name": "Create badge",
											"item": [
												{
													"name": "Create badge",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"try {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.environment.set(\"BADGE_ID\", jsonRes.Data.id);\r",
																	"}\r",
																	"catch (error) {\r",
																	"    console.log(error.message);\r",
																	"}\r",
																	"\r",
																	"pm.test(\"Request is successfull\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Status).to.eql('success');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Participant is created\", function () {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Data).to.have.property('id');\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "x-api-key",
																"value": "{{API_KEY}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{MODERATOR_USER_JWT}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"ClientId\": \"{{CLIENT_ID}}\",\r\n    \"CategoryId\": \"{{BADGE_CATEGORY_ID}}\",\r\n    \"Name\": \"15-Day Physical Activity\",\r\n    \"Description\": \"Badge awarded doing exercise for 15-days consistently.\",\r\n    \"ImageUrl\": \"https://e7.pngegg.com/pngimages/626/893/png-clipart-blue-and-white-check-logo-facebook-social-media-verified-badge-logo-vanity-url-blue-checkmark-blue-angle.png\"\r\n}"
														},
														"url": {
															"raw": "{{BASE_URL}}/badges",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"badges"
															]
														},
														"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
													},
													"response": []
												},
												{
													"name": "Get badge by id",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"pm.test(\"Request is successfull\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Status).to.eql('success');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Schema is created\", function () {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Data).to.have.property('id');\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "x-api-key",
																"value": "{{API_KEY}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{MODERATOR_USER_JWT}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{BASE_URL}}/badges/{{BADGE_ID}}",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"badges",
																"{{BADGE_ID}}"
															]
														},
														"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
													},
													"response": []
												}
											]
										},
										{
											"name": "Create schema",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"SCHEMA_ID\", jsonRes.Data.id);\r",
															"    pm.environment.set(\"SCHEMA_ROOT_NODE_ID\", jsonRes.Data.RootNode.id);\r",
															"    pm.environment.set(\"NODE_01_ID\", jsonRes.Data.RootNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Schema is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
															"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
															"    pm.expect(jsonRes.Data).to.have.property('RootNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ClientId\": \"{{CLIENT_ID}}\",\r\n    \"Name\": \"Exercise 15-Day Badge\",\r\n    \"Description\": \"This schema represents a badge award logic when a patient does physical activity(exercise) for 15 consecutive days. The patient can keep accumulating these badges.\",\r\n    \"Type\": \"Reuse-Existing-Instance\",\r\n    \"EventTypeIds\": [\r\n        \"{{EXERCISE_EVENT_TYPE_ID}}\"\r\n    ],\r\n    \"RootNode\": {\r\n        \"Type\": \"Execution-Node\",\r\n        \"Name\": \"Extract exercise data\",\r\n        \"Description\": \"Extract exercise data\",\r\n        \"Action\": {\r\n            \"ActionType\": \"Extract-Data\",\r\n            \"Name\": \"Extract exercise data\",\r\n            \"InputParams\": {\r\n                \"RecordType\": \"Exercise\",\r\n                \"SourceType\": \"Database\",\r\n                \"Filters\": [\r\n                    {\r\n                        \"Key\": \"SamplingMethod\",\r\n                        \"Value\": \"Any\"\r\n                    }\r\n                ]\r\n            },\r\n            \"OutputParams\": {\r\n                \"Message\": \"Extracting exercise data for the given context.\",\r\n                \"OutputTag\": \"Extract-Data:Exercise\",\r\n                \"DestinationType\": \"Almanac\"\r\n            }\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/schema",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"schema"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "01 - Get root Node - Extract nutrition data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_01_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is retrieved\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_01_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_01_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "02 - Create next node - Calculate Continuity",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_02_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_01_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Name\": \"Calculate continuity\",\r\n    \"Description\": \"This execution step involves calculating the continuity for doing exercise consecutively for 15-days.\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Process-Data\",\r\n        \"Name\": \"Calculate Continuity\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Exercise\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Extract-Data:Exercise\",\r\n            \"DataActionType\": \"Calculate-Continuity\",\r\n            \"KeyDataType\": \"Date\",\r\n            \"KeyName\": \"Date\",\r\n            \"ValueDataType\": \"Boolean\",\r\n            \"ValueName\": \"PhysicalActivityQuestionAns\",\r\n            \"Value\": true,\r\n            \"Operator\": \"Equal\",\r\n            \"ContinuityCount\": 15\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Processing records for 15-day exercise choice continuity\",\r\n            \"OutputTag\": \"Calculate-Continuity:Exercise\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 01",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_02_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_01_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_01_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "03 - Create next node - Extract existing badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_03_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_02_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Get existing badges\",\r\n    \"Description\": \"Extract existing 15-day exercise badges for the participant.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Extract-Data\",\r\n        \"Name\": \"Extract-Badges\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Database\",\r\n            \"InputTag\": \"Badge\",\r\n            \"Filters\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"Exercise\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"15-Day Physical Activity\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Extracting 15-day exercise badges\",\r\n            \"OutputTag\": \"Extract-Data:Badge\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 02",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_03_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_02_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_02_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "04 - Create next node - Compare badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_04_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_03_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Compare badges\",\r\n    \"Description\": \"Compare calculated badges against existing badges for 15-day exercise physical activity.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Compare-Data\",\r\n        \"Name\": \"Compare badges\",\r\n        \"Description\": \"Compare calculated badges against existing badges for 15-day exercise physical activity\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Calculate-Continuity:Exercise\",\r\n            \"SecondaryInputTag\": \"Extract-Data:Badge\",\r\n            \"DataActionType\": \"Find-Range-Difference\",\r\n            \"Filters\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"Exercise\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"15-Day Physical Activity\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Comparing badges and get updated badge list for 15-day exercise physical activity badges.\",\r\n            \"OutputTag\": \"Compare-Data:Badge\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 03",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_04_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_03_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_03_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "05 - Create next node - Store updated badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_05_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_04_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Store updated badges\",\r\n    \"Description\": \"Store updated 15-day exercise physical activity badges for the participant.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Store-Data\",\r\n        \"Name\": \"Store updated badges\",\r\n        \"Description\": \"Store updated 15-day exercise physical activity badges for the participant.\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Compare-Data:Badge\",\r\n            \"StorageKeys\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"Exercise\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"15-Day Physical Activity\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeId\",\r\n                    \"Value\": \"{{BADGE_ID}}\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Extracting 15-day exercise physical activity badges\",\r\n            \"OutputTag\": \"Store-Data:Badge\",\r\n            \"DestinationType\": \"Database\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 04",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_05_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_04_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_04_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Get schema by Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Schema is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
															"    pm.expect(jsonRes.Data).to.have.property('RootNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/schema/{{SCHEMA_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"schema",
														"{{SCHEMA_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										}
									]
								},
								{
									"name": "Schema-30-Day exercise badge",
									"item": [
										{
											"name": "Create badge",
											"item": [
												{
													"name": "Create badge",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"try {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.environment.set(\"BADGE_ID\", jsonRes.Data.id);\r",
																	"}\r",
																	"catch (error) {\r",
																	"    console.log(error.message);\r",
																	"}\r",
																	"\r",
																	"pm.test(\"Request is successfull\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Status).to.eql('success');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Participant is created\", function () {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Data).to.have.property('id');\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "x-api-key",
																"value": "{{API_KEY}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{MODERATOR_USER_JWT}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"ClientId\": \"{{CLIENT_ID}}\",\r\n    \"CategoryId\": \"{{BADGE_CATEGORY_ID}}\",\r\n    \"Name\": \"30-Day Physical Activity\",\r\n    \"Description\": \"Badge awarded doing exercise for 30-days consistently.\",\r\n    \"ImageUrl\": \"https://e7.pngegg.com/pngimages/626/893/png-clipart-blue-and-white-check-logo-facebook-social-media-verified-badge-logo-vanity-url-blue-checkmark-blue-angle.png\"\r\n}"
														},
														"url": {
															"raw": "{{BASE_URL}}/badges",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"badges"
															]
														},
														"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
													},
													"response": []
												},
												{
													"name": "Get badge by id",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"pm.test(\"Request is successfull\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Status).to.eql('success');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Schema is created\", function () {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Data).to.have.property('id');\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "x-api-key",
																"value": "{{API_KEY}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{MODERATOR_USER_JWT}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{BASE_URL}}/badges/{{BADGE_ID}}",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"badges",
																"{{BADGE_ID}}"
															]
														},
														"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
													},
													"response": []
												}
											]
										},
										{
											"name": "Create schema",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"SCHEMA_ID\", jsonRes.Data.id);\r",
															"    pm.environment.set(\"SCHEMA_ROOT_NODE_ID\", jsonRes.Data.RootNode.id);\r",
															"    pm.environment.set(\"NODE_01_ID\", jsonRes.Data.RootNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Schema is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
															"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
															"    pm.expect(jsonRes.Data).to.have.property('RootNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ClientId\": \"{{CLIENT_ID}}\",\r\n    \"Name\": \"Exercise 30-Day Badge\",\r\n    \"Description\": \"This schema represents a badge award logic when a patient does physical activity(exercise) for 30 consecutive days. The patient can keep accumulating these badges.\",\r\n    \"Type\": \"Reuse-Existing-Instance\",\r\n    \"EventTypeIds\": [\r\n        \"{{EXERCISE_EVENT_TYPE_ID}}\"\r\n    ],\r\n    \"RootNode\": {\r\n        \"Type\": \"Execution-Node\",\r\n        \"Name\": \"Extract exercise data\",\r\n        \"Description\": \"Extract exercise data\",\r\n        \"Action\": {\r\n            \"ActionType\": \"Extract-Data\",\r\n            \"Name\": \"Extract exercise data\",\r\n            \"InputParams\": {\r\n                \"RecordType\": \"Exercise\",\r\n                \"SourceType\": \"Database\",\r\n                \"Filters\": [\r\n                    {\r\n                        \"Key\": \"SamplingMethod\",\r\n                        \"Value\": \"Any\"\r\n                    }\r\n                ]\r\n            },\r\n            \"OutputParams\": {\r\n                \"Message\": \"Extracting exercise data for the given context.\",\r\n                \"OutputTag\": \"Extract-Data:Exercise\",\r\n                \"DestinationType\": \"Almanac\"\r\n            }\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/schema",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"schema"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "01 - Get root Node - Extract nutrition data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_01_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is retrieved\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_01_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_01_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "02 - Create next node - Calculate Continuity",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_02_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_01_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Name\": \"Calculate continuity\",\r\n    \"Description\": \"This execution step involves calculating the continuity for doing exercise consecutively for 30-days.\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Process-Data\",\r\n        \"Name\": \"Calculate Continuity\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Exercise\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Extract-Data:Exercise\",\r\n            \"DataActionType\": \"Calculate-Continuity\",\r\n            \"KeyDataType\": \"Date\",\r\n            \"KeyName\": \"Date\",\r\n            \"ValueDataType\": \"Boolean\",\r\n            \"ValueName\": \"PhysicalActivityQuestionAns\",\r\n            \"Value\": true,\r\n            \"Operator\": \"Equal\",\r\n            \"ContinuityCount\": 30\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Processing records for 30-day exercise choice continuity\",\r\n            \"OutputTag\": \"Calculate-Continuity:Exercise\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 01",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_02_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_01_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_01_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "03 - Create next node - Extract existing badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_03_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_02_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Get existing badges\",\r\n    \"Description\": \"Extract existing 30-day exercise badges for the participant.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Extract-Data\",\r\n        \"Name\": \"Extract-Badges\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Database\",\r\n            \"InputTag\": \"Badge\",\r\n            \"Filters\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"Exercise\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"30-Day Physical Activity\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Extracting 30-day exercise badges\",\r\n            \"OutputTag\": \"Extract-Data:Badge\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 02",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_03_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_02_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_02_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "04 - Create next node - Compare badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_04_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_03_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Compare badges\",\r\n    \"Description\": \"Compare calculated badges against existing badges for 30-day exercise physical activity.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Compare-Data\",\r\n        \"Name\": \"Compare badges\",\r\n        \"Description\": \"Compare calculated badges against existing badges for 30-day exercise physical activity\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Calculate-Continuity:Exercise\",\r\n            \"SecondaryInputTag\": \"Extract-Data:Badge\",\r\n            \"DataActionType\": \"Find-Range-Difference\",\r\n            \"Filters\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"Exercise\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"30-Day Physical Activity\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Comparing badges and get updated badge list for 30-day exercise physical activity badges.\",\r\n            \"OutputTag\": \"Compare-Data:Badge\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 03",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_04_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_03_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_03_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "05 - Create next node - Store updated badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_05_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_04_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Store updated badges\",\r\n    \"Description\": \"Store updated 30-day exercise physical activity badges for the participant.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Store-Data\",\r\n        \"Name\": \"Store updated badges\",\r\n        \"Description\": \"Store updated 30-day exercise physical activity badges for the participant.\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Compare-Data:Badge\",\r\n            \"StorageKeys\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"Exercise\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"30-Day Physical Activity\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeId\",\r\n                    \"Value\": \"{{BADGE_ID}}\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Extracting 30-day exercise physical activity badges\",\r\n            \"OutputTag\": \"Store-Data:Badge\",\r\n            \"DestinationType\": \"Database\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 04",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_05_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_04_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_04_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Get schema by Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Schema is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
															"    pm.expect(jsonRes.Data).to.have.property('RootNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/schema/{{SCHEMA_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"schema",
														"{{SCHEMA_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "vital badges",
							"item": [
								{
									"name": "Create badge category",
									"item": [
										{
											"name": "Create badge category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"BADGE_CATEGORY_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Participant is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ClientId\": \"{{CLIENT_ID}}\",\r\n    \"Name\": \"Vital\",\r\n    \"Description\": \"Badge category for vital related badges\",\r\n    \"ImageUrl\": \"https://e7.pngegg.com/pngimages/626/893/png-clipart-blue-and-white-check-logo-facebook-social-media-verified-badge-logo-vanity-url-blue-checkmark-blue-angle.png\"\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/badge-categories",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"badge-categories"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Get badge category by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{BASE_URL}}/badge-categories/{{BADGE_CATEGORY_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"badge-categories",
														"{{BADGE_CATEGORY_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										}
									]
								},
								{
									"name": "Schema-7-Day vital badge",
									"item": [
										{
											"name": "Create badge",
											"item": [
												{
													"name": "Create badge",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"try {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.environment.set(\"BADGE_ID\", jsonRes.Data.id);\r",
																	"}\r",
																	"catch (error) {\r",
																	"    console.log(error.message);\r",
																	"}\r",
																	"\r",
																	"pm.test(\"Request is successfull\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Status).to.eql('success');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Participant is created\", function () {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Data).to.have.property('id');\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "x-api-key",
																"value": "{{API_KEY}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{MODERATOR_USER_JWT}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"ClientId\": \"{{CLIENT_ID}}\",\r\n    \"CategoryId\": \"{{BADGE_CATEGORY_ID}}\",\r\n    \"Name\": \"7-Day Vitals\",\r\n    \"Description\": \"Badge awarded for monitoring body vitals for 7-days consistently.\",\r\n    \"ImageUrl\": \"https://e7.pngegg.com/pngimages/626/893/png-clipart-blue-and-white-check-logo-facebook-social-media-verified-badge-logo-vanity-url-blue-checkmark-blue-angle.png\"\r\n}"
														},
														"url": {
															"raw": "{{BASE_URL}}/badges",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"badges"
															]
														},
														"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
													},
													"response": []
												},
												{
													"name": "Get badge by id",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"pm.test(\"Request is successfull\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Status).to.eql('success');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Schema is created\", function () {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Data).to.have.property('id');\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "x-api-key",
																"value": "{{API_KEY}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{MODERATOR_USER_JWT}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{BASE_URL}}/badges/{{BADGE_ID}}",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"badges",
																"{{BADGE_ID}}"
															]
														},
														"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
													},
													"response": []
												}
											]
										},
										{
											"name": "Create schema",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"SCHEMA_ID\", jsonRes.Data.id);\r",
															"    pm.environment.set(\"SCHEMA_ROOT_NODE_ID\", jsonRes.Data.RootNode.id);\r",
															"    pm.environment.set(\"NODE_01_ID\", jsonRes.Data.RootNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Schema is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
															"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
															"    pm.expect(jsonRes.Data).to.have.property('RootNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ClientId\": \"{{CLIENT_ID}}\",\r\n    \"Name\": \"Vital Monitoring 7-Day Badge\",\r\n    \"Description\": \"This schema represents a badge award logic when a patient monitor body vitals for 7 consecutive days. The patient can keep accumulating these badges.\",\r\n    \"Type\": \"Reuse-Existing-Instance\",\r\n    \"EventTypeIds\": [\r\n        \"{{VITAL_EVENT_TYPE_ID}}\"\r\n    ],\r\n    \"RootNode\": {\r\n        \"Type\": \"Execution-Node\",\r\n        \"Name\": \"Extract vital data\",\r\n        \"Description\": \"Extract vital data\",\r\n        \"Action\": {\r\n            \"ActionType\": \"Extract-Data\",\r\n            \"Name\": \"Extract vital data\",\r\n            \"InputParams\": {\r\n                \"RecordType\": \"Vital\",\r\n                \"SourceType\": \"Database\",\r\n                \"Filters\": [\r\n                    {\r\n                        \"Key\": \"SamplingMethod\",\r\n                        \"Value\": \"All\"\r\n                    }\r\n                ]\r\n            },\r\n            \"OutputParams\": {\r\n                \"Message\": \"Extracting vital data for the given context.\",\r\n                \"OutputTag\": \"Extract-Data:Vital\",\r\n                \"DestinationType\": \"Almanac\"\r\n            }\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/schema",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"schema"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "01 - Get root Node - Extract nutrition data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_01_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is retrieved\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_01_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_01_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "02 - Create next node - Calculate Continuity",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_02_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_01_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Name\": \"Calculate continuity\",\r\n    \"Description\": \"This execution step involves calculating the continuity for monitoring body vital consecutively for 7-days.\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Process-Data\",\r\n        \"Name\": \"Calculate Continuity\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Vital\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Extract-Data:Vital\",\r\n            \"DataActionType\": \"Calculate-Continuity\",\r\n            \"KeyDataType\": \"Date\",\r\n            \"KeyName\": \"Date\",\r\n            \"ValueDataType\": \"Float\",\r\n            \"ValueName\": \"VitalPrimaryValue\",\r\n            \"Operator\": \"Exists\",\r\n            \"ContinuityCount\": 7\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Processing records for 7-day body vitals continuity\",\r\n            \"OutputTag\": \"Calculate-Continuity:Vital\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 01",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_02_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_01_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_01_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "03 - Create next node - Extract existing badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_03_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_02_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Get existing badges\",\r\n    \"Description\": \"Extract existing 7-day vital monitoring badges for the participant.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Extract-Data\",\r\n        \"Name\": \"Extract-Badges\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Database\",\r\n            \"InputTag\": \"Badge\",\r\n            \"Filters\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"Vital\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"7-Day Vitals\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Extracting 7-day vital monitoring badges\",\r\n            \"OutputTag\": \"Extract-Data:Badge\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 02",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_03_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_02_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_02_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "04 - Create next node - Compare badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_04_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_03_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Compare badges\",\r\n    \"Description\": \"Compare calculated badges against existing badges for 7-day vital monitoring.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Compare-Data\",\r\n        \"Name\": \"Compare badges\",\r\n        \"Description\": \"Compare calculated badges against existing badges for 7-day vital monitoring\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Calculate-Continuity:Vital\",\r\n            \"SecondaryInputTag\": \"Extract-Data:Badge\",\r\n            \"DataActionType\": \"Find-Range-Difference\",\r\n            \"Filters\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"Vital\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"7-Day Vitals\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Comparing badges and get updated badge list for 7-day vital monitoring badges.\",\r\n            \"OutputTag\": \"Compare-Data:Badge\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 03",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_04_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_03_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_03_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "05 - Create next node - Store updated badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_05_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_04_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Store updated badges\",\r\n    \"Description\": \"Store updated 7-day vital monitoring badges for the participant.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Store-Data\",\r\n        \"Name\": \"Store updated badges\",\r\n        \"Description\": \"Store updated 7-day vital monitoring badges for the participant.\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Compare-Data:Badge\",\r\n            \"StorageKeys\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"Vital\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"7-Day Vitals\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeId\",\r\n                    \"Value\": \"{{BADGE_ID}}\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Extracting 7-day vital monitoring badges\",\r\n            \"OutputTag\": \"Store-Data:Badge\",\r\n            \"DestinationType\": \"Database\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 04",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_05_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_04_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_04_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Get schema by Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Schema is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
															"    pm.expect(jsonRes.Data).to.have.property('RootNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/schema/{{SCHEMA_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"schema",
														"{{SCHEMA_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										}
									]
								},
								{
									"name": "Schema-15-Day vital badge",
									"item": [
										{
											"name": "Create badge",
											"item": [
												{
													"name": "Create badge",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"try {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.environment.set(\"BADGE_ID\", jsonRes.Data.id);\r",
																	"}\r",
																	"catch (error) {\r",
																	"    console.log(error.message);\r",
																	"}\r",
																	"\r",
																	"pm.test(\"Request is successfull\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Status).to.eql('success');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Participant is created\", function () {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Data).to.have.property('id');\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "x-api-key",
																"value": "{{API_KEY}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{MODERATOR_USER_JWT}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"ClientId\": \"{{CLIENT_ID}}\",\r\n    \"CategoryId\": \"{{BADGE_CATEGORY_ID}}\",\r\n    \"Name\": \"15-Day Vitals\",\r\n    \"Description\": \"Badge awarded for monitoring body vitals for 15-days consistently.\",\r\n    \"ImageUrl\": \"https://e7.pngegg.com/pngimages/626/893/png-clipart-blue-and-white-check-logo-facebook-social-media-verified-badge-logo-vanity-url-blue-checkmark-blue-angle.png\"\r\n}"
														},
														"url": {
															"raw": "{{BASE_URL}}/badges",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"badges"
															]
														},
														"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
													},
													"response": []
												},
												{
													"name": "Get badge by id",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"pm.test(\"Request is successfull\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Status).to.eql('success');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Schema is created\", function () {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Data).to.have.property('id');\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "x-api-key",
																"value": "{{API_KEY}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{MODERATOR_USER_JWT}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{BASE_URL}}/badges/{{BADGE_ID}}",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"badges",
																"{{BADGE_ID}}"
															]
														},
														"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
													},
													"response": []
												}
											]
										},
										{
											"name": "Create schema",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"SCHEMA_ID\", jsonRes.Data.id);\r",
															"    pm.environment.set(\"SCHEMA_ROOT_NODE_ID\", jsonRes.Data.RootNode.id);\r",
															"    pm.environment.set(\"NODE_01_ID\", jsonRes.Data.RootNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Schema is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
															"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
															"    pm.expect(jsonRes.Data).to.have.property('RootNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ClientId\": \"{{CLIENT_ID}}\",\r\n    \"Name\": \"Vital Monitoring 15-Day Badge\",\r\n    \"Description\": \"This schema represents a badge award logic when a patient monitor body vitals for 15 consecutive days. The patient can keep accumulating these badges.\",\r\n    \"Type\": \"Reuse-Existing-Instance\",\r\n    \"EventTypeIds\": [\r\n        \"{{VITAL_EVENT_TYPE_ID}}\"\r\n    ],\r\n    \"RootNode\": {\r\n        \"Type\": \"Execution-Node\",\r\n        \"Name\": \"Extract vital data\",\r\n        \"Description\": \"Extract vital data\",\r\n        \"Action\": {\r\n            \"ActionType\": \"Extract-Data\",\r\n            \"Name\": \"Extract vital data\",\r\n            \"InputParams\": {\r\n                \"RecordType\": \"Vital\",\r\n                \"SourceType\": \"Database\",\r\n                \"Filters\": [\r\n                    {\r\n                        \"Key\": \"SamplingMethod\",\r\n                        \"Value\": \"All\"\r\n                    }\r\n                ]\r\n            },\r\n            \"OutputParams\": {\r\n                \"Message\": \"Extracting vital data for the given context.\",\r\n                \"OutputTag\": \"Extract-Data:Vital\",\r\n                \"DestinationType\": \"Almanac\"\r\n            }\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/schema",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"schema"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "01 - Get root Node - Extract nutrition data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_01_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is retrieved\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_01_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_01_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "02 - Create next node - Calculate Continuity",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_02_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_01_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Name\": \"Calculate continuity\",\r\n    \"Description\": \"This execution step involves calculating the continuity for monitoring body vital consecutively for 15-days.\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Process-Data\",\r\n        \"Name\": \"Calculate Continuity\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Vital\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Extract-Data:Vital\",\r\n            \"DataActionType\": \"Calculate-Continuity\",\r\n            \"KeyDataType\": \"Date\",\r\n            \"KeyName\": \"Date\",\r\n            \"ValueDataType\": \"Float\",\r\n            \"ValueName\": \"VitalPrimaryValue\",\r\n            \"Operator\": \"Exists\",\r\n            \"ContinuityCount\": 15\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Processing records for 15-day body vitals continuity\",\r\n            \"OutputTag\": \"Calculate-Continuity:Vital\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 01",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_02_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_01_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_01_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "03 - Create next node - Extract existing badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_03_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_02_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Get existing badges\",\r\n    \"Description\": \"Extract existing 15-day vital monitoring badges for the participant.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Extract-Data\",\r\n        \"Name\": \"Extract-Badges\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Database\",\r\n            \"InputTag\": \"Badge\",\r\n            \"Filters\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"Vital\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"15-Day Vitals\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Extracting 15-day vital monitoring badges\",\r\n            \"OutputTag\": \"Extract-Data:Badge\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 02",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_03_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_02_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_02_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "04 - Create next node - Compare badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_04_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_03_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Compare badges\",\r\n    \"Description\": \"Compare calculated badges against existing badges for 15-day vital monitoring.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Compare-Data\",\r\n        \"Name\": \"Compare badges\",\r\n        \"Description\": \"Compare calculated badges against existing badges for 15-day vital monitoring\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Calculate-Continuity:Vital\",\r\n            \"SecondaryInputTag\": \"Extract-Data:Badge\",\r\n            \"DataActionType\": \"Find-Range-Difference\",\r\n            \"Filters\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"Vital\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"15-Day Vitals\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Comparing badges and get updated badge list for 15-day vital monitoring badges.\",\r\n            \"OutputTag\": \"Compare-Data:Badge\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 03",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_04_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_03_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_03_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "05 - Create next node - Store updated badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_05_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_04_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Store updated badges\",\r\n    \"Description\": \"Store updated 15-day vital monitoring badges for the participant.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Store-Data\",\r\n        \"Name\": \"Store updated badges\",\r\n        \"Description\": \"Store updated 15-day vital monitoring badges for the participant.\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Compare-Data:Badge\",\r\n            \"StorageKeys\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"Vital\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"15-Day Vitals\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeId\",\r\n                    \"Value\": \"{{BADGE_ID}}\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Extracting 15-day vital monitoring badges\",\r\n            \"OutputTag\": \"Store-Data:Badge\",\r\n            \"DestinationType\": \"Database\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 04",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_05_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_04_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_04_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Get schema by Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Schema is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
															"    pm.expect(jsonRes.Data).to.have.property('RootNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/schema/{{SCHEMA_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"schema",
														"{{SCHEMA_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										}
									]
								},
								{
									"name": "Schema-30-Day vital badge",
									"item": [
										{
											"name": "Create badge",
											"item": [
												{
													"name": "Create badge",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"try {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.environment.set(\"BADGE_ID\", jsonRes.Data.id);\r",
																	"}\r",
																	"catch (error) {\r",
																	"    console.log(error.message);\r",
																	"}\r",
																	"\r",
																	"pm.test(\"Request is successfull\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Status).to.eql('success');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Participant is created\", function () {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Data).to.have.property('id');\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "x-api-key",
																"value": "{{API_KEY}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{MODERATOR_USER_JWT}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"ClientId\": \"{{CLIENT_ID}}\",\r\n    \"CategoryId\": \"{{BADGE_CATEGORY_ID}}\",\r\n    \"Name\": \"30-Day Vitals\",\r\n    \"Description\": \"Badge awarded for monitoring body vitals for 30-days consistently.\",\r\n    \"ImageUrl\": \"https://e7.pngegg.com/pngimages/626/893/png-clipart-blue-and-white-check-logo-facebook-social-media-verified-badge-logo-vanity-url-blue-checkmark-blue-angle.png\"\r\n}"
														},
														"url": {
															"raw": "{{BASE_URL}}/badges",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"badges"
															]
														},
														"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
													},
													"response": []
												},
												{
													"name": "Get badge by id",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"pm.test(\"Request is successfull\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Status).to.eql('success');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Schema is created\", function () {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Data).to.have.property('id');\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "x-api-key",
																"value": "{{API_KEY}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{MODERATOR_USER_JWT}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{BASE_URL}}/badges/{{BADGE_ID}}",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"badges",
																"{{BADGE_ID}}"
															]
														},
														"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
													},
													"response": []
												}
											]
										},
										{
											"name": "Create schema",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"SCHEMA_ID\", jsonRes.Data.id);\r",
															"    pm.environment.set(\"SCHEMA_ROOT_NODE_ID\", jsonRes.Data.RootNode.id);\r",
															"    pm.environment.set(\"NODE_01_ID\", jsonRes.Data.RootNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Schema is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
															"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
															"    pm.expect(jsonRes.Data).to.have.property('RootNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ClientId\": \"{{CLIENT_ID}}\",\r\n    \"Name\": \"Vital Monitoring 30-Day Badge\",\r\n    \"Description\": \"This schema represents a badge award logic when a patient monitor body vitals for 30 consecutive days. The patient can keep accumulating these badges.\",\r\n    \"Type\": \"Reuse-Existing-Instance\",\r\n    \"EventTypeIds\": [\r\n        \"{{VITAL_EVENT_TYPE_ID}}\"\r\n    ],\r\n    \"RootNode\": {\r\n        \"Type\": \"Execution-Node\",\r\n        \"Name\": \"Extract vital data\",\r\n        \"Description\": \"Extract vital data\",\r\n        \"Action\": {\r\n            \"ActionType\": \"Extract-Data\",\r\n            \"Name\": \"Extract vital data\",\r\n            \"InputParams\": {\r\n                \"RecordType\": \"Vital\",\r\n                \"SourceType\": \"Database\",\r\n                \"Filters\": [\r\n                    {\r\n                        \"Key\": \"SamplingMethod\",\r\n                        \"Value\": \"All\"\r\n                    }\r\n                ]\r\n            },\r\n            \"OutputParams\": {\r\n                \"Message\": \"Extracting vital data for the given context.\",\r\n                \"OutputTag\": \"Extract-Data:Vital\",\r\n                \"DestinationType\": \"Almanac\"\r\n            }\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/schema",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"schema"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "01 - Get root Node - Extract nutrition data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_01_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is retrieved\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_01_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_01_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "02 - Create next node - Calculate Continuity",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_02_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_01_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Name\": \"Calculate continuity\",\r\n    \"Description\": \"This execution step involves calculating the continuity for monitoring body vital consecutively for 30-days.\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Process-Data\",\r\n        \"Name\": \"Calculate Continuity\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Vital\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Extract-Data:Vital\",\r\n            \"DataActionType\": \"Calculate-Continuity\",\r\n            \"KeyDataType\": \"Date\",\r\n            \"KeyName\": \"Date\",\r\n            \"ValueDataType\": \"Float\",\r\n            \"ValueName\": \"VitalPrimaryValue\",\r\n            \"Operator\": \"Exists\",\r\n            \"ContinuityCount\": 30\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Processing records for 30-day body vitals continuity\",\r\n            \"OutputTag\": \"Calculate-Continuity:Vital\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 01",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_02_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_01_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_01_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "03 - Create next node - Extract existing badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_03_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_02_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Get existing badges\",\r\n    \"Description\": \"Extract existing 30-day vital monitoring badges for the participant.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Extract-Data\",\r\n        \"Name\": \"Extract-Badges\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Database\",\r\n            \"InputTag\": \"Badge\",\r\n            \"Filters\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"Vital\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"30-Day Vitals\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Extracting 30-day vital monitoring badges\",\r\n            \"OutputTag\": \"Extract-Data:Badge\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 02",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_03_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_02_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_02_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "04 - Create next node - Compare badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_04_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_03_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Compare badges\",\r\n    \"Description\": \"Compare calculated badges against existing badges for 30-day vital monitoring.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Compare-Data\",\r\n        \"Name\": \"Compare badges\",\r\n        \"Description\": \"Compare calculated badges against existing badges for 30-day vital monitoring\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Calculate-Continuity:Vital\",\r\n            \"SecondaryInputTag\": \"Extract-Data:Badge\",\r\n            \"DataActionType\": \"Find-Range-Difference\",\r\n            \"Filters\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"Vital\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"30-Day Vitals\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Comparing badges and get updated badge list for 30-day vital monitoring badges.\",\r\n            \"OutputTag\": \"Compare-Data:Badge\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 03",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_04_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_03_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_03_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "05 - Create next node - Store updated badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_05_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_04_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Store updated badges\",\r\n    \"Description\": \"Store updated 30-day vital monitoring badges for the participant.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Store-Data\",\r\n        \"Name\": \"Store updated badges\",\r\n        \"Description\": \"Store updated 30-day vital monitoring badges for the participant.\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Compare-Data:Badge\",\r\n            \"StorageKeys\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"Vital\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"30-Day Vitals\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeId\",\r\n                    \"Value\": \"{{BADGE_ID}}\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Extracting 30-day vital monitoring badges\",\r\n            \"OutputTag\": \"Store-Data:Badge\",\r\n            \"DestinationType\": \"Database\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 04",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_05_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_04_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_04_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Get schema by Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Schema is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
															"    pm.expect(jsonRes.Data).to.have.property('RootNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/schema/{{SCHEMA_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"schema",
														"{{SCHEMA_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "mental health badges",
							"item": [
								{
									"name": "Create badge category",
									"item": [
										{
											"name": "Create badge category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"BADGE_CATEGORY_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Participant is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ClientId\": \"{{CLIENT_ID}}\",\r\n    \"Name\": \"MentalHealth\",\r\n    \"Description\": \"Badge category for mental health related badges\",\r\n    \"ImageUrl\": \"https://e7.pngegg.com/pngimages/626/893/png-clipart-blue-and-white-check-logo-facebook-social-media-verified-badge-logo-vanity-url-blue-checkmark-blue-angle.png\"\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/badge-categories",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"badge-categories"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Get badge category by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{BASE_URL}}/badge-categories/{{BADGE_CATEGORY_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"badge-categories",
														"{{BADGE_CATEGORY_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										}
									]
								},
								{
									"name": "Schema-7-Day mental health badge",
									"item": [
										{
											"name": "Create badge",
											"item": [
												{
													"name": "Create badge",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"try {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.environment.set(\"BADGE_ID\", jsonRes.Data.id);\r",
																	"}\r",
																	"catch (error) {\r",
																	"    console.log(error.message);\r",
																	"}\r",
																	"\r",
																	"pm.test(\"Request is successfull\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Status).to.eql('success');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Participant is created\", function () {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Data).to.have.property('id');\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "x-api-key",
																"value": "{{API_KEY}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{MODERATOR_USER_JWT}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"ClientId\": \"{{CLIENT_ID}}\",\r\n    \"CategoryId\": \"{{BADGE_CATEGORY_ID}}\",\r\n    \"Name\": \"Mental health 7-Day Badge\",\r\n    \"Description\": \"Badge awarded choosing mental health for 7-days consistently.\",\r\n    \"ImageUrl\": \"https://e7.pngegg.com/pngimages/626/893/png-clipart-blue-and-white-check-logo-facebook-social-media-verified-badge-logo-vanity-url-blue-checkmark-blue-angle.png\"\r\n}"
														},
														"url": {
															"raw": "{{BASE_URL}}/badges",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"badges"
															]
														},
														"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
													},
													"response": []
												},
												{
													"name": "Get badge by id",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"pm.test(\"Request is successfull\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Status).to.eql('success');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Schema is created\", function () {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Data).to.have.property('id');\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "x-api-key",
																"value": "{{API_KEY}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{MODERATOR_USER_JWT}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{BASE_URL}}/badges/{{BADGE_ID}}",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"badges",
																"{{BADGE_ID}}"
															]
														},
														"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
													},
													"response": []
												}
											]
										},
										{
											"name": "Create schema",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"SCHEMA_ID\", jsonRes.Data.id);\r",
															"    pm.environment.set(\"SCHEMA_ROOT_NODE_ID\", jsonRes.Data.RootNode.id);\r",
															"    pm.environment.set(\"NODE_01_ID\", jsonRes.Data.RootNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Schema is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
															"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
															"    pm.expect(jsonRes.Data).to.have.property('RootNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ClientId\": \"{{CLIENT_ID}}\",\r\n    \"Name\": \"Mental health 7-Day Badge\",\r\n    \"Description\": \"This schema represents a badge award logic when a patient takes chooses mental health monitoring for 7 consecutive days. The patient can keep accumulating these badges.\",\r\n    \"Type\": \"Reuse-Existing-Instance\",\r\n    \"EventTypeIds\": [\r\n        \"{{MENTAL_HEALTH_EVENT_TYPE_ID}}\"\r\n    ],\r\n    \"RootNode\": {\r\n        \"Type\": \"Execution-Node\",\r\n        \"Name\": \"Extract mental health data\",\r\n        \"Description\": \"Extract mental health data\",\r\n        \"Action\": {\r\n            \"ActionType\": \"Extract-Data\",\r\n            \"Name\": \"Extract mental health data\",\r\n            \"InputParams\": {\r\n                \"RecordType\": \"MentalHealth\",\r\n                \"SourceType\": \"Database\",\r\n                \"Filters\": [\r\n                    {\r\n                        \"Key\": \"SamplingMethod\",\r\n                        \"Value\": \"Any\"\r\n                    }\r\n                ]\r\n            },\r\n            \"OutputParams\": {\r\n                \"Message\": \"Extracting mental health data for the given context.\",\r\n                \"OutputTag\": \"Extract-Data:MentalHealth\",\r\n                \"DestinationType\": \"Almanac\"\r\n            }\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/schema",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"schema"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "01 - Get root Node - Extract mental health data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_01_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is retrieved\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_01_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_01_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "02 - Create next node - Calculate Continuity",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_02_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_01_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Name\": \"Calculate continuity\",\r\n    \"Description\": \"This execution step involves calculating the continuity for mental health monitoring consecutively for 7-days.\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Process-Data\",\r\n        \"Name\": \"Calculate Continuity\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"MentalHealth\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Extract-Data:MentalHealth\",\r\n            \"DataActionType\": \"Calculate-Continuity\",\r\n            \"KeyDataType\": \"Date\",\r\n            \"KeyName\": \"Date\",\r\n            \"ValueDataType\": \"Float\",\r\n            \"ValueName\": \"Duration\",\r\n            \"Operator\": \"Exists\",\r\n            \"ContinuityCount\": 7\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Processing records for 7-day mental health continuity\",\r\n            \"OutputTag\": \"Calculate-Continuity:MentalHealth\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 01",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_02_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_01_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_01_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "03 - Create next node - Extract existing badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_03_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_02_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Get existing badges\",\r\n    \"Description\": \"Extract existing 7-day mental health monitoring badges for the participant.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Extract-Data\",\r\n        \"Name\": \"Extract-Badges\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Database\",\r\n            \"InputTag\": \"Badge\",\r\n            \"Filters\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"MentalHealth\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"Mental health 7-Day Badge\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Extracting 7-day 7-Day mental health badges\",\r\n            \"OutputTag\": \"Extract-Data:Badge\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 02",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_03_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_02_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_02_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "04 - Create next node - Compare badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_04_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_03_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Compare badges\",\r\n    \"Description\": \"Compare calculated badges against existing badges for 7-day mental health monitoring.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Compare-Data\",\r\n        \"Name\": \"Compare badges\",\r\n        \"Description\": \"Compare calculated badges against existing badges for 7-day mental health monitoring\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Calculate-Continuity:MentalHealth\",\r\n            \"SecondaryInputTag\": \"Extract-Data:Badge\",\r\n            \"DataActionType\": \"Find-Range-Difference\",\r\n            \"Filters\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"MentalHealth\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"Mental health 7-Day Badge\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Comparing badges and get updated badge list for 7-Day mental health monitoring badges.\",\r\n            \"OutputTag\": \"Compare-Data:Badge\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 03",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_04_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_03_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_03_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "05 - Create next node - Store updated badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_05_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_04_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Store updated badges\",\r\n    \"Description\": \"Store updated 7-day mental health monitoring badges for the participant.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Store-Data\",\r\n        \"Name\": \"Store updated badges\",\r\n        \"Description\": \"Store updated 7-day mental health monitoring badges for the participant.\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Compare-Data:Badge\",\r\n            \"StorageKeys\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"MentalHealth\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"Mental health 7-Day Badge\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeId\",\r\n                    \"Value\": \"{{BADGE_ID}}\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Extracting 7-day mental health monitoring badges\",\r\n            \"OutputTag\": \"Store-Data:Badge\",\r\n            \"DestinationType\": \"Database\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 04",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_05_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_04_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_04_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Get schema by Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Schema is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
															"    pm.expect(jsonRes.Data).to.have.property('RootNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/schema/{{SCHEMA_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"schema",
														"{{SCHEMA_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										}
									]
								},
								{
									"name": "Schema-15-Day mental health badge",
									"item": [
										{
											"name": "Create badge",
											"item": [
												{
													"name": "Create badge",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"try {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.environment.set(\"BADGE_ID\", jsonRes.Data.id);\r",
																	"}\r",
																	"catch (error) {\r",
																	"    console.log(error.message);\r",
																	"}\r",
																	"\r",
																	"pm.test(\"Request is successfull\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Status).to.eql('success');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Participant is created\", function () {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Data).to.have.property('id');\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "x-api-key",
																"value": "{{API_KEY}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{MODERATOR_USER_JWT}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"ClientId\": \"{{CLIENT_ID}}\",\r\n    \"CategoryId\": \"{{BADGE_CATEGORY_ID}}\",\r\n    \"Name\": \"Mental health 15-Day Badge\",\r\n    \"Description\": \"Badge awarded choosing mental health monitoring for 15-days consistently.\",\r\n    \"ImageUrl\": \"https://e7.pngegg.com/pngimages/626/893/png-clipart-blue-and-white-check-logo-facebook-social-media-verified-badge-logo-vanity-url-blue-checkmark-blue-angle.png\"\r\n}"
														},
														"url": {
															"raw": "{{BASE_URL}}/badges",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"badges"
															]
														},
														"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
													},
													"response": []
												},
												{
													"name": "Get badge by id",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"pm.test(\"Request is successfull\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Status).to.eql('success');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Schema is created\", function () {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Data).to.have.property('id');\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "x-api-key",
																"value": "{{API_KEY}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{MODERATOR_USER_JWT}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{BASE_URL}}/badges/{{BADGE_ID}}",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"badges",
																"{{BADGE_ID}}"
															]
														},
														"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
													},
													"response": []
												}
											]
										},
										{
											"name": "Create schema",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"SCHEMA_ID\", jsonRes.Data.id);\r",
															"    pm.environment.set(\"SCHEMA_ROOT_NODE_ID\", jsonRes.Data.RootNode.id);\r",
															"    pm.environment.set(\"NODE_01_ID\", jsonRes.Data.RootNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Schema is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
															"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
															"    pm.expect(jsonRes.Data).to.have.property('RootNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ClientId\": \"{{CLIENT_ID}}\",\r\n    \"Name\": \"Mental health 15-Day Badge\",\r\n    \"Description\": \"This schema represents a badge award logic when a patient takes chooses mental health monitoring for 15 consecutive days. The patient can keep accumulating these badges.\",\r\n    \"Type\": \"Reuse-Existing-Instance\",\r\n    \"EventTypeIds\": [\r\n        \"{{MENTAL_HEALTH_EVENT_TYPE_ID}}\"\r\n    ],\r\n    \"RootNode\": {\r\n        \"Type\": \"Execution-Node\",\r\n        \"Name\": \"Extract mental health data\",\r\n        \"Description\": \"Extract mental health data\",\r\n        \"Action\": {\r\n            \"ActionType\": \"Extract-Data\",\r\n            \"Name\": \"Extract mental health data\",\r\n            \"InputParams\": {\r\n                \"RecordType\": \"MentalHealth\",\r\n                \"SourceType\": \"Database\",\r\n                \"Filters\": [\r\n                    {\r\n                        \"Key\": \"SamplingMethod\",\r\n                        \"Value\": \"Any\"\r\n                    }\r\n                ]\r\n            },\r\n            \"OutputParams\": {\r\n                \"Message\": \"Extracting mental health data for the given context.\",\r\n                \"OutputTag\": \"Extract-Data:MentalHealth\",\r\n                \"DestinationType\": \"Almanac\"\r\n            }\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/schema",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"schema"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "01 - Get root Node - Extract mental health data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_01_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is retrieved\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_01_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_01_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "02 - Create next node - Calculate Continuity",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_02_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_01_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Name\": \"Calculate continuity\",\r\n    \"Description\": \"This execution step involves calculating the continuity for mental health monitoring consecutively for 15-days.\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Process-Data\",\r\n        \"Name\": \"Calculate Continuity\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"MentalHealth\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Extract-Data:MentalHealth\",\r\n            \"DataActionType\": \"Calculate-Continuity\",\r\n            \"KeyDataType\": \"Date\",\r\n            \"KeyName\": \"Date\",\r\n            \"ValueDataType\": \"Float\",\r\n            \"ValueName\": \"Duration\",\r\n            \"Operator\": \"Exists\",\r\n            \"ContinuityCount\": 15\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Processing records for 15-day mental health monitoring continuity\",\r\n            \"OutputTag\": \"Calculate-Continuity:MentalHealth\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 01",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_02_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_01_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_01_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "03 - Create next node - Extract existing badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_03_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_02_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Get existing badges\",\r\n    \"Description\": \"Extract existing 15-day mental health monitoring badges for the participant.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Extract-Data\",\r\n        \"Name\": \"Extract-Badges\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Database\",\r\n            \"InputTag\": \"Badge\",\r\n            \"Filters\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"MentalHealth\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"Mental health 15-Day Badge\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Extracting 15-day mental health badges\",\r\n            \"OutputTag\": \"Extract-Data:Badge\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 02",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_03_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_02_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_02_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "04 - Create next node - Compare badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_04_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_03_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Compare badges\",\r\n    \"Description\": \"Compare calculated badges against existing badges for 15-day mental health monitoring.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Compare-Data\",\r\n        \"Name\": \"Compare badges\",\r\n        \"Description\": \"Compare calculated badges against existing badges for 15-day mental health monitoring\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Calculate-Continuity:MentalHealth\",\r\n            \"SecondaryInputTag\": \"Extract-Data:Badge\",\r\n            \"DataActionType\": \"Find-Range-Difference\",\r\n            \"Filters\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"MentalHealth\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"Mental health 15-Day Badge\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Comparing badges and get updated badge list for 15-Day mental health monitoring.\",\r\n            \"OutputTag\": \"Compare-Data:Badge\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 03",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_04_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_03_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_03_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "05 - Create next node - Store updated badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_05_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_04_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Store updated badges\",\r\n    \"Description\": \"Store updated 15-day mental health monitoring badges for the participant.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Store-Data\",\r\n        \"Name\": \"Store updated badges\",\r\n        \"Description\": \"Store updated 15-day mental health monitoring badges for the participant.\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Compare-Data:Badge\",\r\n            \"StorageKeys\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"MentalHealth\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"Mental health 15-Day Badge\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeId\",\r\n                    \"Value\": \"{{BADGE_ID}}\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Extracting 15-day mental health monitoring badges\",\r\n            \"OutputTag\": \"Store-Data:Badge\",\r\n            \"DestinationType\": \"Database\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 04",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_05_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_04_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_04_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Get schema by Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Schema is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
															"    pm.expect(jsonRes.Data).to.have.property('RootNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/schema/{{SCHEMA_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"schema",
														"{{SCHEMA_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										}
									]
								},
								{
									"name": "Schema-30-Day mental health badge",
									"item": [
										{
											"name": "Create badge",
											"item": [
												{
													"name": "Create badge",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"try {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.environment.set(\"BADGE_ID\", jsonRes.Data.id);\r",
																	"}\r",
																	"catch (error) {\r",
																	"    console.log(error.message);\r",
																	"}\r",
																	"\r",
																	"pm.test(\"Request is successfull\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Status).to.eql('success');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Participant is created\", function () {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Data).to.have.property('id');\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "x-api-key",
																"value": "{{API_KEY}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{MODERATOR_USER_JWT}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"ClientId\": \"{{CLIENT_ID}}\",\r\n    \"CategoryId\": \"{{BADGE_CATEGORY_ID}}\",\r\n    \"Name\": \"Mental health 30-Day Badge\",\r\n    \"Description\": \"Badge awarded choosing mental health monitoring for 30-days consistently.\",\r\n    \"ImageUrl\": \"https://e7.pngegg.com/pngimages/626/893/png-clipart-blue-and-white-check-logo-facebook-social-media-verified-badge-logo-vanity-url-blue-checkmark-blue-angle.png\"\r\n}"
														},
														"url": {
															"raw": "{{BASE_URL}}/badges",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"badges"
															]
														},
														"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
													},
													"response": []
												},
												{
													"name": "Get badge by id",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"pm.test(\"Request is successfull\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Status).to.eql('success');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Schema is created\", function () {\r",
																	"    var jsonRes = pm.response.json();\r",
																	"    pm.expect(jsonRes.Data).to.have.property('id');\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "x-api-key",
																"value": "{{API_KEY}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{MODERATOR_USER_JWT}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{BASE_URL}}/badges/{{BADGE_ID}}",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"badges",
																"{{BADGE_ID}}"
															]
														},
														"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
													},
													"response": []
												}
											]
										},
										{
											"name": "Create schema",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"SCHEMA_ID\", jsonRes.Data.id);\r",
															"    pm.environment.set(\"SCHEMA_ROOT_NODE_ID\", jsonRes.Data.RootNode.id);\r",
															"    pm.environment.set(\"NODE_01_ID\", jsonRes.Data.RootNode.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Schema is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
															"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
															"    pm.expect(jsonRes.Data).to.have.property('RootNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ClientId\": \"{{CLIENT_ID}}\",\r\n    \"Name\": \"Mental health 30-Day Badge\",\r\n    \"Description\": \"This schema represents a badge award logic when a patient takes chooses mental health monitoring for 30 consecutive days. The patient can keep accumulating these badges.\",\r\n    \"Type\": \"Reuse-Existing-Instance\",\r\n    \"EventTypeIds\": [\r\n        \"{{MENTAL_HEALTH_EVENT_TYPE_ID}}\"\r\n    ],\r\n    \"RootNode\": {\r\n        \"Type\": \"Execution-Node\",\r\n        \"Name\": \"Extract mental health data\",\r\n        \"Description\": \"Extract mental health data\",\r\n        \"Action\": {\r\n            \"ActionType\": \"Extract-Data\",\r\n            \"Name\": \"Extract mental health data\",\r\n            \"InputParams\": {\r\n                \"RecordType\": \"MentalHealth\",\r\n                \"SourceType\": \"Database\",\r\n                \"Filters\": [\r\n                    {\r\n                        \"Key\": \"SamplingMethod\",\r\n                        \"Value\": \"Any\"\r\n                    }\r\n                ]\r\n            },\r\n            \"OutputParams\": {\r\n                \"Message\": \"Extracting mental health data for the given context.\",\r\n                \"OutputTag\": \"Extract-Data:MentalHealth\",\r\n                \"DestinationType\": \"Almanac\"\r\n            }\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/schema",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"schema"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "01 - Get root Node - Extract mental health data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_01_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is retrieved\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_01_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_01_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "02 - Create next node - Calculate Continuity",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_02_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_01_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Name\": \"Calculate continuity\",\r\n    \"Description\": \"This execution step involves calculating the continuity for mental health monitoring consecutively for 30-days.\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Process-Data\",\r\n        \"Name\": \"Calculate Continuity\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"MentalHealth\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Extract-Data:MentalHealth\",\r\n            \"DataActionType\": \"Calculate-Continuity\",\r\n            \"KeyDataType\": \"Date\",\r\n            \"KeyName\": \"Date\",\r\n            \"ValueDataType\": \"Float\",\r\n            \"ValueName\": \"Duration\",\r\n            \"Operator\": \"Exists\",\r\n            \"ContinuityCount\": 30\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Processing records for 30-day mental health monitoring continuity\",\r\n            \"OutputTag\": \"Calculate-Continuity:MentalHealth\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 01",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_02_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_01_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_01_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "03 - Create next node - Extract existing badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_03_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_02_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Get existing badges\",\r\n    \"Description\": \"Extract existing 30-day mental health monitoring badges for the participant.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Extract-Data\",\r\n        \"Name\": \"Extract-Badges\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Database\",\r\n            \"InputTag\": \"Badge\",\r\n            \"Filters\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"MentalHealth\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"Mental health 30-Day Badge\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Extracting 30-day mental health monitoring badges\",\r\n            \"OutputTag\": \"Extract-Data:Badge\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 02",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_03_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_02_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_02_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "04 - Create next node - Compare badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_04_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_03_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Compare badges\",\r\n    \"Description\": \"Compare calculated badges against existing badges for 30-day mental health monitoring.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Compare-Data\",\r\n        \"Name\": \"Compare badges\",\r\n        \"Description\": \"Compare calculated badges against existing badges for 30-day mental health monitoring.\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Calculate-Continuity:MentalHealth\",\r\n            \"SecondaryInputTag\": \"Extract-Data:Badge\",\r\n            \"DataActionType\": \"Find-Range-Difference\",\r\n            \"Filters\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"MentalHealth\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"Mental health 30-Day Badge\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Comparing badges and get updated badge list for 30-Day mental health monitoring badges.\",\r\n            \"OutputTag\": \"Compare-Data:Badge\",\r\n            \"DestinationType\": \"Almanac\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 03",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_04_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_03_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_03_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "05 - Create next node - Store updated badges",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.environment.set(\"NODE_05_ID\", jsonRes.Data.id);\r",
															"}\r",
															"catch (error) {\r",
															"    console.log(error.message);\r",
															"}\r",
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ParentNodeId\": \"{{NODE_04_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Store updated badges\",\r\n    \"Description\": \"Store updated 30-day mental health monitoring badges for the participant.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Action\": {\r\n        \"ActionType\": \"Store-Data\",\r\n        \"Name\": \"Store updated badges\",\r\n        \"Description\": \"Store updated 30-day mental health monitoring badges for the participant.\",\r\n        \"InputParams\": {\r\n            \"RecordType\": \"Badge\",\r\n            \"SourceType\": \"Almanac\",\r\n            \"InputTag\": \"Compare-Data:Badge\",\r\n            \"StorageKeys\": [\r\n                {\r\n                    \"Key\": \"BadgeCategory\",\r\n                    \"Value\": \"MentalHealth\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeTitle\",\r\n                    \"Value\": \"Mental health 30-Day Badge\"\r\n                },\r\n                {\r\n                    \"Key\": \"BadgeId\",\r\n                    \"Value\": \"{{BADGE_ID}}\"\r\n                }\r\n            ]\r\n        },\r\n        \"OutputParams\": {\r\n            \"Message\": \"Extracting 30-day mental health badges monitoring\",\r\n            \"OutputTag\": \"Store-Data:Badge\",\r\n            \"DestinationType\": \"Database\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Update next node for node 04",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Node is updated\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ParentNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Action\": {\r\n        \"OutputParams\": {\r\n            \"NextNodeId\": \"{{NODE_05_ID}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/nodes/{{NODE_04_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"nodes",
														"{{NODE_04_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										},
										{
											"name": "Get schema by Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request is successfull\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Status).to.eql('success');\r",
															"});\r",
															"\r",
															"pm.test(\"Schema is created\", function () {\r",
															"    var jsonRes = pm.response.json();\r",
															"    pm.expect(jsonRes.Data).to.have.property('id');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
															"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
															"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
															"    pm.expect(jsonRes.Data).to.have.property('RootNode');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-api-key",
														"value": "{{API_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{MODERATOR_USER_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{BASE_URL}}/engine/schema/{{SCHEMA_ID}}",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"engine",
														"schema",
														"{{SCHEMA_ID}}"
													]
												},
												"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
											},
											"response": []
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Get context for participant / reference id",
			"item": [
				{
					"name": "Get schema instance by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"SCHEMA_INSTANCE_ID\", jsonRes.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Schema instance is returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
									"    pm.expect(jsonRes.Data).to.have.property('RootNodeId');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Medication 7 Day Badge Rule\",\r\n    \"Description\": \"This rule represents logical steps involved in awarding a badge for consecutive 7 days.\",\r\n    \"ParentNodeId\": \"{{SCHEMA_ROOT_NODE_ID}}\",\r\n    \"Action\": {\r\n        \"ActionType\": \"{{AWARD_BADGE_EVENT_TYPE}}\",\r\n        \"Name\": \"Medication 7-Days Badge\",\r\n        \"Description\": \"This rule represents logical steps involved in awarding a badge for consecutive 7 days.\",\r\n        \"Params\": {\r\n            \"Message\": \"Award medication 7-days badge.\",\r\n            \"Action\": \"{{AWARD_BADGE_EVENT_TYPE}}\",\r\n            \"NextNodeId\": null,\r\n            \"Extra\": {}\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/engine/schema-instances/{{SCHEMA_INSTANCE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"engine",
								"schema-instances",
								"{{SCHEMA_INSTANCE_ID}}"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				}
			]
		},
		{
			"name": "Get participant badges",
			"item": [
				{
					"name": "Get participant by reference id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"PARTICIPANT_ID\", jsonRes.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Schema instance is returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
									"    pm.expect(jsonRes.Data).to.have.property('RootNodeId');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/participants/by-reference-id/{{REFERENCE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"participants",
								"by-reference-id",
								"{{REFERENCE_ID}}"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				},
				{
					"name": "Get participant badges",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"PARTICIPANT_ID\", jsonRes.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Schema instance is returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
									"    pm.expect(jsonRes.Data).to.have.property('RootNodeId');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/participants/{{PARTICIPANT_ID}}/badges",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"participants",
								"{{PARTICIPANT_ID}}",
								"badges"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				}
			]
		},
		{
			"name": "Utility methods",
			"item": [
				{
					"name": "Delete schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Schema is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
									"    pm.expect(jsonRes.Data).to.have.property('RootNode');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{MODERATOR_USER_JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/engine/schema/{{SCHEMA_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"engine",
								"schema",
								"{{SCHEMA_ID}}"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				}
			]
		},
		{
			"name": "Add rules",
			"item": [
				{
					"name": "Create rule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"RULE_ID\", jsonRes.Data.id);\r",
									"    pm.environment.set(\"ROOT_CONDITION_ID\", jsonRes.Data.Condition.id);\r",
									"    pm.environment.set(\"RULE_ACTION_ID\", jsonRes.Data.Action.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Schema is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
									"    pm.expect(jsonRes.Data).to.have.property('RootNodeId');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{MODERATOR_USER_JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Medication 7 Day Badge Rule\",\r\n    \"Description\": \"This rule represents logical steps involved in awarding a badge for consecutive 7 days.\",\r\n    \"ParentNodeId\": \"{{SCHEMA_ROOT_NODE_ID}}\",\r\n    \"Action\": {\r\n        \"ActionType\": \"{{AWARD_BADGE_EVENT_TYPE}}\",\r\n        \"Name\": \"Medication 7-Days Badge\",\r\n        \"Description\": \"This rule represents logical steps involved in awarding a badge for consecutive 7 days.\",\r\n        \"Params\": {\r\n            \"Message\": \"Award medication 7-days badge.\",\r\n            \"Action\": \"{{AWARD_BADGE_EVENT_TYPE}}\",\r\n            \"NextNodeId\": null,\r\n            \"Extra\": {}\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/engine/rules",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"engine",
								"rules"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				},
				{
					"name": "Delete rule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"RULE_ID\", jsonRes.Data.id);\r",
									"    pm.environment.set(\"ROOT_CONDITION_ID\", jsonRes.Data.Condition.id);\r",
									"    pm.environment.set(\"RULE_ACTION_ID\", jsonRes.Data.Action.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Schema is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
									"    pm.expect(jsonRes.Data).to.have.property('RootNodeId');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{MODERATOR_USER_JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Medication 7 Day Badge Rule\",\r\n    \"Description\": \"This rule represents logical steps involved in awarding a badge for consecutive 7 days.\",\r\n    \"ParentNodeId\": \"{{SCHEMA_ROOT_NODE_ID}}\",\r\n    \"Action\": {\r\n        \"ActionType\": \"{{AWARD_BADGE_EVENT_TYPE}}\",\r\n        \"Name\": \"Medication 7-Days Badge\",\r\n        \"Description\": \"This rule represents logical steps involved in awarding a badge for consecutive 7 days.\",\r\n        \"Params\": {\r\n            \"Message\": \"Award medication 7-days badge.\",\r\n            \"Action\": \"{{AWARD_BADGE_EVENT_TYPE}}\",\r\n            \"NextNodeId\": null,\r\n            \"Extra\": {}\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/engine/rules/{{RULE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"engine",
								"rules",
								"{{RULE_ID}}"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				},
				{
					"name": "Create child condition - find consecutive days",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"RULE_ID\", jsonRes.Data.id);\r",
									"    pm.environment.set(\"ROOT_CONDITION_ID\", jsonRes.Data.Condition.id);\r",
									"    pm.environment.set(\"RULE_ACTION_ID\", jsonRes.Data.Action.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Schema is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
									"    pm.expect(jsonRes.Data).to.have.property('RootNodeId');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{MODERATOR_USER_JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"RuleId\": \"{{RULE_ID}}\",\r\n    \"Name\": \"Atleast one instance 7 consecutive days of medication adherence found\",\r\n    \"Description\": \"From the list of medication consumption records, atleast 1 consecutive 7 days.\",\r\n    \"ParentNodeId\": \"{{SCHEMA_ROOT_NODE_ID}}\",\r\n    \"Action\": {\r\n        \"ActionType\": \"{{AWARD_BADGE_EVENT_TYPE}}\",\r\n        \"Name\": \"Medication 7-Days Badge\",\r\n        \"Description\": \"This rule represents logical steps involved in awarding a badge for consecutive 7 days.\",\r\n        \"Params\": {\r\n            \"Message\": \"Award medication 7-days badge.\",\r\n            \"Action\": \"{{AWARD_BADGE_EVENT_TYPE}}\",\r\n            \"NextNodeId\": null,\r\n            \"Extra\": {}\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/engine/conditions",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"engine",
								"conditions"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				},
				{
					"name": "Create child condition - check if badge already exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"RULE_ID\", jsonRes.Data.id);\r",
									"    pm.environment.set(\"ROOT_CONDITION_ID\", jsonRes.Data.Condition.id);\r",
									"    pm.environment.set(\"RULE_ACTION_ID\", jsonRes.Data.Action.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Schema is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
									"    pm.expect(jsonRes.Data).to.have.property('RootNodeId');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{MODERATOR_USER_JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Medication 7 Day Badge Rule\",\r\n    \"Description\": \"This rule represents logical steps involved in awarding a badge for consecutive 7 days.\",\r\n    \"ParentNodeId\": \"{{SCHEMA_ROOT_NODE_ID}}\",\r\n    \"Action\": {\r\n        \"ActionType\": \"{{AWARD_BADGE_EVENT_TYPE}}\",\r\n        \"Name\": \"Medication 7-Days Badge\",\r\n        \"Description\": \"This rule represents logical steps involved in awarding a badge for consecutive 7 days.\",\r\n        \"Params\": {\r\n            \"Message\": \"Award medication 7-days badge.\",\r\n            \"Action\": \"{{AWARD_BADGE_EVENT_TYPE}}\",\r\n            \"NextNodeId\": null,\r\n            \"Extra\": {}\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/engine/conditions",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"engine",
								"conditions"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				}
			]
		},
		{
			"name": "Badges",
			"item": [
				{
					"name": "Get badge stock images",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"PARTICIPANT_ID\", jsonRes.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Schema instance is returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
									"    pm.expect(jsonRes.Data).to.have.property('RootNodeId');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/badges/stock-images",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"badges",
								"stock-images"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				}
			]
		}
	]
}